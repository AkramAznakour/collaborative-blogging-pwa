<?php

use Illuminate\Database\Seeder;
use \Illuminate\Support\Facades\DB;

class PostsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {

        $faker = Faker\Factory::create();

        $posts = [
            [
                'title' => 'How To Master Async/Await With This Real World Example',
                'content' => '<h3><a id="Table_of_Contents_1"></a>Table of Contents:</h3> <ol> <li>Introduction (callbacks, promises, async/await)</li> <li>Real world example — Currency Converter that is receiving asynchronous data from<br /> two API’s.</li> </ol> <h4><a id="Just_a_note_7"></a>Just a note…</h4> <p>Along with writing this article, I have also created a YouTube video! <br> You<br /> can follow along and code while watching. I advise you to first read the<br /> article, and then code along with the video.</p> <p>Link of the video: <a href="https://www.youtube.com/watch?v=mlb525FgU3k" target="_blank">Learn Async/Await in This Real World<br /> Project</a></p> <h3><a id="Introduction_16"></a>Introduction</h3> <p>Async/await is a new way to write asynchronous code. It is built on top of<br /> promises, therefore, it is also non blocking.</p> <p>The big difference is that asynchronous code looks and behaves a little more<br /> like synchronous code. This is where all its power lies.</p> <p>Previous options for asynchronous code were <strong>callbacks and promises</strong>.</p> <h4><a id="Callbacks_in_action_26"></a>Callbacks in action</h4> <pre><code>setTimeout(() =&gt; { console.log(\'This runs after 1000 milliseconds.\'); }, 1000); </code></pre> <h4><a id="Problem_with_callbacks__The_infamous_Callback_Hell_32"></a>Problem with callbacks <strong>— <strong>The infamous</strong> Callback Hell</strong></h4> <p>Nesting callbacks within callbacks will soon start to look like this:</p> <p><img src="https://cdn-images-1.medium.com/max/800/1*2Td5WcevnTX_54YT-MLBfw.png" alt="" /><br /> <span class="figcaption_hack">Callback Hell</span></p> <h4><a id="Callback_Hell_39"></a>Callback Hell</h4> <blockquote> <p>The situation where callbacks are nested within other callbacks several levels<br /> deep, potentially making it difficult to understand and maintain the code.</p> </blockquote> <h4><a id="Promises_in_action_44"></a>Promises in action</h4> <pre><code>const promiseFunction = new Promise((resolve, reject) =&gt; { const add = (a, b) =&gt; a + b; resolve(add(2, 2)); }); promiseFunction.then((response) =&gt; { console.log(response); }).catch((error) =&gt; { console.log(error); }); </code></pre> <p><em>promiseFunction</em> returns a **Promise **that represents the process of that<br /> function. The resolve function signals the **Promise **instance that it has<br /> finished.</p> <p>Afterwards, we can call* .then() *and *.catch() *on that promise function: <br><br /> **then **— Runs a callback you pass to it when the promise has finished.<br><br /> <strong>catch</strong> — Runs a callback you pass to it when something went wrong.</p> <h3><a id="Async_Functions_66"></a>Async Functions</h3> <p>Async function provide us with a <strong>clean and concise syntax</strong> that enables us to<br /> write less code to accomplish the same outcome we would get with promises. Async<br /> is nothing more than syntactic sugar for promises.</p> <p>Async functions are created by prepending the word <strong>async</strong>* *before the<br /> function declaration like this:</p> <pre><code>const asyncFunction = async () =&gt; { // Code } </code></pre> <p>Asynchronous functions can be <strong>paused</strong> with <strong>await</strong>*, *the keyword that can<br /> only be used <strong>inside an async function</strong>. Await returns whatever the async<br /> function returns when it is done.</p> <p>This is the difference between promises and async/await:</p> <pre><code>// Async/Await const asyncGreeting = async () =&gt; \'Greetings\'; // Promises const promiseGreeting = () =&gt; new Promise(((resolve) =&gt; { resolve(\'Greetings\'); })); asyncGreeting().then(result =&gt; console.log(result)); promiseGreeting().then(result =&gt; console.log(result)); </code></pre> <p>**Async/Await <strong>looks</strong> **similar to synchronous code, and synchronous code is<br /> much easier to understand.</p> <p>Now that we’ve covered the basics, let’s move onto our real world example!</p> <h3><a id="Currency_Converter_101"></a>Currency Converter</h3> <h4><a id="Project_clarification_and_setup_103"></a>Project clarification and setup</h4> <p>In this tutorial, we will build a simple but educational and useful application<br /> that is going to improve your overall knowledge of <strong>Async/Await.</strong></p> <p>The program will take in currency code we want to convert from and currency code<br /> we want to convert to, as well as the amount of money. Afterwards, the program<br /> will output the correct exchange rate based on the data from the APIs.</p> <p>In this application we’re going receive data from two asynchronous sources:</p> <ol> <li>**Currency Layer **— <a href="https://currencylayer.com/" target="_blank">https://currencylayer.com</a> —<br /> You’ll need to sign up for free so you can use the API Access Key. This API will<br /> provide us with data needed to calculate exchange rate between currencies.</li> <li><strong>Rest Countries</strong> — <a href="http://restcountries.eu/" target="_blank">http://restcountries.eu/</a> — This<br /> API will give us information about where can we use the currency we just<br /> converted our money to.</li> </ol> <p>For starters, create a new directory and run <code>npm init</code>, skip through all the<br /> steps, and install axios by typing <code>npm i --save axios.</code> Create a new file<br /> called <code>currency-converter.js.</code></p> <p>Firstly, require axios by typing: <code>const axios = require(‘axios’);</code></p> <h4><a id="Lets_dive_into_asyncawait_127"></a>Let’s dive into async/await</h4> <p>Our goal for this program is to have three functions. Not one, not two, but<br /> **three asynchronous functions. **The first function is going to fetch data<br /> about currencies. The second function if going to fetch data about countries.<br /> And the third function is going to gather that information into one single place<br /> and output it nicely to the user.</p> <h4><a id="First_function__Receiving_Currency_Data_Asynchronously_135"></a>First function — Receiving Currency Data Asynchronously</h4> <p>We’ll create an asynchronous function that is going to take in two arguments,<br /> fromCurrency and toCurrency.</p> <pre><code>const getExchangeRate = ( , ) =&gt; {} </code></pre> <p>Now we need to fetch the data. With async/await, we can assign data directly to<br /> a variable; don’t forget to sign up and enter your own correct access key.</p> <pre><code>const getExchangeRate = ( , ) =&gt; { const response = await axios.get(\'http://data.fixer.io/api/latest? access_key= &amp;format=1\'); } </code></pre> <p>The data from the response is available under <code>response.data.rates</code> so we can<br /> put that into a variable just below response:</p> <pre><code>const rate = response.data.rates; </code></pre> <p>Since everything is being converted from the euro, below, we’ll create a<br /> variable called euro which will be equal to 1/currency we want to convert from:</p> <pre><code>const euro = 1 / rate[fromCurrency]; </code></pre> <p>Finally, to get an exchange rate we can multiply euros by the currency we want<br /> to convert to:</p> <pre><code>const exchangeRate = euro * rate[toCurrency]; </code></pre> <p>Finally, the function should look something like this:</p> <h4><a id="Second_function__Receiving_Country_Data_Asynchronously_173"></a>Second function — Receiving Country Data Asynchronously</h4> <p>We’ll create an asynchronous function that is going to take currencyCode as an<br /> argument:</p> <pre><code>const getCountries = async ( ) =&gt; {} </code></pre> <p>As we saw before, we are going to fetch data and assign it to a variable:</p> <pre><code>const response = await axios.get(` ); </code></pre> <p>We’ll then map over the data and return <code>country.name</code> for each:</p> <pre><code>return response.data.map( =&gt; country.name); </code></pre> <p>Finally, the function should look something like this:</p> <h4><a id="Third_and_final_function__Merging_it_all_together_193"></a>Third and final function — Merging it all together</h4> <p>We’ll create an asynchronous function that is going to take <em>fromCurrency</em>,<br /> <em>toCurrency</em>, and amount as arguments:</p> <pre><code>const convert = async ( , , ) =&gt; {} </code></pre> <p>First, we get the currency data:</p> <pre><code>const exchangeRate = await getExchangeRate(fromCurrency, toCurrency); </code></pre> <p>Second, we get the countries data:</p> <pre><code>const countries = await getCountries(toCurrency); </code></pre> <p>Third, we save the converted amount to a variable:</p> <pre><code>const convertedAmount = (amount * exchangeRate).toFixed(2); </code></pre> <p>Finally, we output it all to the user:</p> <pre><code>return `${amount} ${fromCurrency} is worth ${convertedAmount} ${toCurrency}. You can spend these in the following countries: ${countries}`; </code></pre> <p>All of that put together should look like this:</p> <h4><a id="Adding_trycatch_to_deal_with_error_cases_221"></a>Adding try/catch to deal with error cases</h4> <p>We need to wrap all our logic in try, and catch the error if there is one:</p> <pre><code>const getExchangeRate = async (fromCurrency, toCurrency) =&gt; { try { const response = await axios.get(\' ); const rate = response.data.rates; const euro = 1 / rate[fromCurrency]; const exchangeRate = euro * rate[toCurrency]; return exchangeRate; } catch (error) { throw new Error(`Unable to get currency ${fromCurrency} and ${toCurrency}`); } }; </code></pre> <p>Repeat the same for the second function:</p> <pre><code>const getCountries = async (currencyCode) =&gt; { try { const response = await axios.get(` ); return response.data.map(country =&gt; country.name); } catch (error) { throw new Error(`Unable to get countries that use ${currencyCode}`); } }; </code></pre> <p>And since the third function is just working with what the first and the second<br /> function provided, there is no need for error checking there.</p> <p>Finally, we can call the function and receive the data:</p> <pre><code>convertCurrency(\'USD\', \'HRK\', 20) .then((message) =&gt; { console.log(message); }).catch((error) =&gt; { console.log(error.message); }); </code></pre> <p>The output you’re going to receive:</p> <p><img src="https://cdn-images-1.medium.com/max/800/1*6U7qD_xhp1M6ja5omI6m6w.png" alt="" /></p> <h3><a id="Thats_it_269"></a>That’s it!</h3> <p>You made it all the way until the end! If you get stuck along the way, feel free<br /> to check out the code on this<br /> <a href="https://github.com/adrianhajdin/currency-converter" target="_blank">repository</a>. If you have<br /> any questions or feedback, let me know in the comments down below. Most helpful<br /> would be the support on <strong>YouTube</strong> since I have just created a channel! <a href="https://bit.ly/2ArnMyb" target="_blank">Click<br /> here</a>, there is a lot of interesting stuff coming soon!<br /> 😃</p> <p>You can also check out the tutorial I did on<br /> <a href="https://blog.cloudboost.io/everything-you-need-to-know-about-mongoose-63fcf8564d52" target="_blank">Mongoose</a>.</p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/javascript?source=post" target="_blank">JavaScript</a></li> <li><a href="https://medium.freecodecamp.org/tagged/web-development?source=post" target="_blank">Web<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/coding?source=post" target="_blank">Coding</a></li> <li><a href="https://medium.freecodecamp.org/tagged/programming?source=post" target="_blank">Programming</a></li> <li><a href="https://medium.freecodecamp.org/tagged/tech?source=post" target="_blank">Tech</a></li> </ul> <h3><a id="Adrian_Hajdinhttpsmediumfreecodecamporgadrianhajdin00_289"></a><a href="https://medium.freecodecamp.org/@adrianhajdin00" target="_blank">Adrian Hajdin</a></h3> <p>Passionate JavaScript Developer 💻</p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_293"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p>',
                'user_id' => '1',
                'topic_id' => '1',
            ], [
                'title' => 'How to create a Vue.js app using Single-File Components, without the CLI',
                'content' => ' <p><em>An understanding of Vue’s single-file components (SFCs) and Node Package<br /> Manager (NPM) will be helpful for this article.</em></p> <p>A framework’s command line interface, or CLI, is the preferred method to<br /> scaffold a project. It provides a starting point of files, folders, and<br /> configuration. This scaffolding also provides a development and build process. A<br /> development process provides a way to see updates occurring as you edit your<br /> project. The build process creates the final version of files to be used in<br /> production.</p> <p>Installing and running Vue.js (“Vue”) can be done with a script tag that points<br /> to the Vue content delivery network (CDN). No build or development process is<br /> necessary. But, if you use Vue single-file components (SFCs), you need to<br /> convert those files into something the browser can understand. The files need to<br /> be converted to Hyper-Text Markup Language (HTML), Cascading Style Sheets (CSS),<br /> and JavaScript (JS). In this case, a development and build process must be used.</p> <p>Instead of relying on the Vue CLI to scaffold our project and provide us with a<br /> development and build process, we will build a project from scratch. We will<br /> create our own development and build process using Webpack.</p> <h4><a id="What_is_Webpack_22"></a>What is Webpack?</h4> <p>Webpack is a module bundler. It merges code from multiple files into one. Before<br /> Webpack, the user included a script tag for each JavaScript file. Although<br /> browsers are <em>slowly</em> supporting ES6 modules, Webpack continues to be the<br /> preferred way to build modular code.</p> <p>Besides being a module bundler, Webpack can also transform code. For example,<br /> Webpack can take modern JavaScript (ECMAScript 6+) and convert it into<br /> ECMAScript 5. While Webpack <em>bundles</em> the code itself, it transforms the code<br /> with loaders and plugins. Think of loaders and plugins as add-ons for Webpack.</p> <h4><a id="Webpack_and_Vue_34"></a>Webpack and Vue</h4> <p>Single-file components allow us to build an entire component (structure, style,<br /> and function) in one file. And, most code editors provide syntax highlighting<br /> and linting for these SFCs.</p> <p><span class="figcaption_hack"><a href="https://vuejs.org/v2/guide/single-file-components.html" target="_blank">Vue Single File<br /> Component</a>: notice the*<br /> .vue* extension.</span></p> <p><em>Notice the file ends with .vue. The browser doesn’t know what to do with that<br /> extension. Webpack, through the use of loaders and plugins, transforms this file<br /> into the HTML, CSS, and JS the browser can consume.</em></p> <h3><a id="The_Project_Build_a_Hello_World_Vue_Application_Using_SingleFile_Components_48"></a>The Project: Build a Hello World Vue Application Using Single-File Components.</h3> <h4><a id="Step_1_Create_the_project_structure_50"></a>Step 1: Create the project structure</h4> <p>The most basic Vue project will include an HTML, JavaScript, and a Vue file (the<br /> file ending in <em>.vue</em>). We will place these files in a <strong>folder called<br /> <strong><code>src</code></strong>.</strong> The source folder will help us separate the code we are writing<br /> from the code Webpack will eventually build.</p> <p>Since we will be using Webpack, we need <strong>a Webpack configuration file.</strong></p> <p>Additionally, we will use a compiler called Babel. Babel allows us to write ES6<br /> code which it then compiles into ES5. Babel is one of those “add-on features”<br /> for Webpack. <strong>Babel also needs a configuration file.</strong></p> <p>Finally, since we are using NPM, we will also have** a node_modules folder** and<br /> **a package.json file. **Those will be created automatically when we initialize<br /> our project as an NPM project and begin installing our dependencies.</p> <p>To get started, create a folder called <code>hello-world</code>. From the command line,<br /> change to that directory and run <code>npm init</code>. Follow the on-screen prompts to<br /> create the project. Then, create the rest of the folders (except for<br /> <code>node_modules</code>*) *as described above. Your project structure should look like<br /> this:</p> <p><span class="figcaption_hack">The simplest Vue SFC project structure.</span></p> <h4><a id="Step_2_Install_the_dependencies_75"></a>Step 2: Install the dependencies</h4> <p>Here is a quick rundown of the dependencies we are using:</p> <p><strong>vue</strong>: The JavaScript framework</p> <p><strong>vue-loader and vue-template-compiler</strong>: Used to convert our Vue files into<br /> JavaScript.</p> <p><strong>webpack</strong>: The tool that will allow us to pass our code through some<br /> transformations and bundle it into one file.</p> <p><strong>webpack-cli:</strong> Needed to run the Webpack commands.</p> <p><strong>webpack-dev-server</strong>: Although not needed for our small project (since we<br /> won’t be making any HTTP requests), we will still “serve” our project from a<br /> development server.</p> <p><strong>babel-loader</strong>: Transform our ES6 code into ES5. (It needs help from the next<br /> two dependencies.)</p> <p><strong>@babel/core and @babel/preset-env</strong>: Babel by itself doesn’t do anything to<br /> your code. These two “add-ons” will allow us to transform our ES6 code into ES5<br /> code.</p> <p>**css-loader: *<em>Takes the CSS we write in our <code>.vue</code></em> *files or any CSS we might<br /> import into any of our JavaScript files and resolve the path to those files. In<br /> other words, figure out where the CSS is. This is another loader that by itself<br /> won’t do much. We need the next loader to actually do something with the CSS.</p> <p><strong>vue-style-loader</strong>: Take the CSS we got from our <code>css-loader</code> and inject it<br /> into our HTML file. This will create and inject a style tag in the head of our<br /> HTML document.</p> <p><strong>html-webpack-plugin</strong>: Take our <em>index.html</em> and inject our bundled JavaScript<br /> file in the head. Then, copy this file into the <code>dist</code>* *folder.</p> <p><strong>rimraf</strong>: Allows us, from the command line, to delete files. This will come in<br /> handy when we build our project multiple times. We will use this to delete any<br /> old builds.</p> <p>Let’s install these dependencies now. From the command line, run:</p> <p><code>npm install vue vue-loader vue-template-compiler webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env css-loader vue-style-loader html-webpack-plugin rimraf -D</code></p> <p>**Note: **<em>The “-D” at the end marks each dependency as a development dependency<br /> in our package.json. We are bundling all dependencies in one file, so, for our<br /> small project, we have no production dependencies.</em></p> <h4><a id="Step_3_Create_the_files_Except_for_our_Webpack_configuration_file_126"></a>Step 3: Create the files (Except for our Webpack configuration file).</h4> <p>Up to this point, nothing should look too foreign. I’ve kept each file very<br /> basic. I’ve only added minimal CSS and JS to see our workflow in action.</p> <h4><a id="Step_4_Instructing_Webpack_what_to_do_131"></a>Step 4: Instructing Webpack what to do</h4> <p>All the configuration Webpack needs access to is now present. We need to do two<br /> final things: Tell Webpack what to do and run Webpack.</p> <p>Below is the Webpack configuration file (<code>webpack.config.js</code>). Create this file<br /> in the projects root directory. Line-by-line we’ll discuss what is occurring.</p> <p><strong>Lines 1 and 2:</strong> We are importing the two plugins we use below. Notice, our<br /> loaders don’t normally need to be imported, just our plugins. And in our case,<br /> the* *<code>vue-loader</code> (which we use in line 9) also needs a plugin to work<br /> (however, Babel, for example, does not).</p> <p><strong>Line 4:</strong> We export our configuration as an object. This gives us access to it<br /> when we run the Webpack commands.</p> <p>**Line 5: **This is our entry module. Webpack needs a place to start. It looks<br /> in our <code>main.js</code> file and then starts to comb through our code from that point.</p> <p><strong>Line 6 and 7:</strong> This is the module object. Here, we primarily pass in an array<br /> of rules. Each rule tells Webpack how to handle certain files. So, while Webpack<br /> uses the entry point of <code>main.js</code> to start combing through our code, it uses the<br /> rules to transform our code.</p> <p><strong>Line 8 (rule):</strong> This rule instructs Webpack to use the <code>babel-loader</code> on any<br /> files which end with <code>.js</code>*. *Remember, Babel will transform ES6+ to ES5.</p> <p><strong>Line 9 (rule):</strong> This rule instructs Webpack to use <code>vue-loader</code>* *(and don’t<br /> forget the associated plugin on line 17) to transform our <code>.vue</code> files into<br /> JavaScript.</p> <p><strong>Line 10 (rule):</strong> Sometimes we want to pass a file through two loaders.<br /> Counterintuitively, Webpack will pass the file from right to left instead of<br /> left to right. Here we are using two loaders and saying to Webpack: “get my CSS<br /> from my Vue file or any JavaScript files(<code>css-loader</code>) and inject it into my<br /> HTML as a style tag (<code>vue-style-loader</code>).</p> <p><strong>Lines 11 and 12:</strong> Close out our rules array and module object.</p> <p>**Lines 13: **Create a plugins array. Here we will add the two plugins we need.</p> <p><strong>Line: 14 -16 (plugin):</strong> The <code>HtmlWebpackPlugin</code> takes the location of our<br /> <em>index.html</em> file and adds our bundled JavaScript file to it via a script tag.<br /> This plugin will also copy the HTML file to our distribution folder when we<br /> build our project.</p> <p>**Line 17 (plugin): **The <code>VueLoaderPlugin</code> works with our <code>vue-loader</code> to parse<br /> our <code>.vue</code> files.</p> <p><strong>Line 18:</strong> Close out the plugins array.</p> <p><strong>Line 19:</strong> Close out the Webpack object that we are exporting.</p> <h4><a id="Step_5_Setting_up_our_packagejson_file_so_we_can_run_Webpack_184"></a>Step 5: Setting up our package.json file so we can run Webpack</h4> <p>Our configuration is complete, now we want to see our application. Ideally, as<br /> we make changes to our application, the browser would update automatically. This<br /> is possible with <code>webpack-dev-server</code>.</p> <p>Delete the <code>test</code> script in our <code>package.json</code> file, and replace it with a<br /> script to serve our application:</p> <p>The name of this command is your choice. I chose to call mine <code>serve</code> since we<br /> will be <em>serving</em> our application.</p> <p>From our terminal or command line, we can run <code>npm run serve</code> and that in turn<br /> will run <code>webpack-dev-server --mode development</code> .</p> <p><em>The <em><code>--mode development</code></em> is what’s called a flag or option. We haven’t talked<br /> about this, but it essentially instructs Webpack that you are in development<br /> mode. We can also pass in <em><code>--mode production</code></em> which we will do when we build<br /> our project. These aren’t necessarily required for Webpack to work. Without<br /> these, you will get a warning message telling you to provide a mode when you run<br /> Webpack .</em></p> <p><em>I say “necessarily required” because Webpack will minimize our code in<br /> production mode but not in development. So, don’t think those commands don’t do<br /> anything–they do.</em></p> <p>Let’s run <code>npm run serve</code> and see what happens.</p> <p>When we run <code>npm run serve</code> we get some output in our terminal. And, if<br /> everything goes well:</p> <p><img src="https://cdn-images-1.medium.com/max/800/1*UNoqxigEpgvVZRjs2VqxTA.png" alt="" /></p> <p>And if we scroll up a bit:</p> <p>Point your browser to <code>http://localhost:8080</code>. You will see your Blue Hello<br /> World message in Roboto font.</p> <p>Now, let’s update the project and change the message to <code>Hello Universe</code>. Notice<br /> that the webpage refreshes automatically. That’s great, right? Can you think of<br /> a downside?</p> <p>Let’s change the application just a bit and include an input which we will bind<br /> a variable to (with <code>v-model</code>). We will output the variable in an <code>&lt;h2&gt;</code>tag<br /> below the input. I’ve also updated the styling section to style the message now.<br /> Our <code>App.vue</code>* *file should look like this:</p> <p>When we serve our application, we will have an input with a message of <code>Hello World</code> below it. The input is bound to the <code>message</code> variable, so as we type, we<br /> change the <code>&lt;h2&gt;</code> content. Go ahead, type into the input to change the<br /> <code>&lt;h2&gt;</code>content.</p> <p>Now go back to your editor, and below the <code>&lt;h2&gt;</code>tag, add the following:</p> <p><code>&lt;h3&gt;Some Other Message&lt;/h3&gt;</code></p> <p>Save your <code>App.vue</code> and watch what happens.</p> <p>The <code>h2</code> we just updated by typing in our input reverted back to <code>Hello World</code>.<br /> This is because the browser actually refreshes, and the script tag and page are<br /> loaded again. In other words, we were not able to maintain the state of our<br /> application. This may not seem like a big deal, but as you are testing your<br /> application and adding data to it, it will be frustrating if your app “resets”<br /> every time. Fortunately, Webpack offers us a solution called Hot Module<br /> Replacement.</p> <p>The hot module replacement is a plugin provided by Webpack itself. Up until this<br /> point, we have not used the Webpack object itself in our configuration file.<br /> However, we will now import Webpack so we can access the plugin.</p> <p>In addition to the plugin, we will pass one additional option to Webpack, the<br /> <code>devServer</code> option. In that option, we will set <code>hot</code> to <code>true</code>. Also, we will<br /> make an (optional) update to our build workflow: We will open the browser window<br /> automatically when we run <code>npm run serve</code>. We do this by setting <code>open</code> to<br /> <code>true</code> which is also inside the <code>devServer</code> option.</p> <p>Notice that we’ve imported Webpack so we could access the<br /> <code>hotModuleReplacementPlugin</code>. We’ve added that to the <code>plugins</code> array, and then<br /> told Webpack to use it with <code>hot: true</code>. We open the browser window<br /> automatically when we serve the application with <code>open: true</code>.</p> <p>Run <code>npm run serve</code>:</p> <p>The browser window should open, and if you open your dev tools, you should<br /> notice a slight change in the output. It now tells us hot module replacement is<br /> enabled. Let’s type in our input to change the <code>&lt;h2&gt;</code> content. Then, change<br /> the<code>h3</code> tag to read: <code>One More Message</code>.</p> <p>Save your file and notice what happens.</p> <p>The browser doesn’t refresh, but our <code>&lt;h3&gt;</code>change is reflected! The message we<br /> typed in the input remains, but the <code>h3</code> updates. This allows our application to<br /> keep it’s state while we edit it.</p> <h4><a id="Step_7_Building_our_project_278"></a>Step 7: Building our project</h4> <p>So far, we’ve served our application. But, what if we want to build our<br /> application so we can distribute it?</p> <p>If you noticed, when we serve our application, no files are created. Webpack<br /> creates a version of these files that only exist in temporary memory. If we want<br /> to distribute our Hello World app to our client, we need to <em>build</em> the project.</p> <p>This is very simple. Just like before, we will create a script in our<br /> package.json file to tell Webpack to build our project. We will use <code>webpack</code> as<br /> the command instead of <code>webpack-dev-server</code>. We will pass in the <code>--mode production</code> flag as well.</p> <p>We will also use the <code>rimraf</code> package first to delete any previous builds we may<br /> have. We do this simply by <code>rimraf dist</code>.</p> <p><code>dist</code>* is the folder Webpack will automatically create when it builds our<br /> project. “Dist” is short for distribution–i.e. we are “distributing” our<br /> applications code.*</p> <p>The <code>rimraf dist</code> command is telling the* *<code>rimraf</code> package to delete the <code>dist</code><br /> directory. <strong>Make sure you don’t <strong><code>rimraf src</code></strong> by accident!</strong></p> <p><em>Webpack also offers a plugin that will accomplish this cleaning process called<br /> <em><code>clean-webpack-plugin</code></em>. I chose <em><code>dist</code></em> show an alternative way.</em></p> <p>Our package.json file should look like this:</p> <p>There are three things to notice:</p> <ol> <li>I’ve created a separate <code>clean</code> script so we can run it independently of our<br /> build script.</li> <li><code>npm run build</code> will call the independent <code>clean</code> script we’ve created.</li> <li>I have <code>&amp;&amp;</code> between <code>npm run clean</code> and <code>webpack</code>. This instruction says: “run<br /> <code>npm run clean</code> first, <em>then</em> run <code>webpack</code>”.</li> </ol> <p>Let’s build the project.</p> <p><code>npm run build</code></p> <p>Webpack creates a <code>dist</code> directory, and our code is inside. Since our code makes<br /> no HTTP requests, we can simply open our <code>index.html</code> file in our browser and it<br /> will work as expected.</p> <p><em>If we had code that was making HTTP requests, we would run into some<br /> cross-origin errors as we made those requests. We would need to run that project<br /> from a server for it to work.</em></p> <p>Let’s examine the <code>index.html</code> that Webpack created in the browser and the code<br /> editor.</p> <p><span class="figcaption_hack">R</span></p> <p>If we open it in our editor or take a look at the source code in our dev tools<br /> you will see Webpack injected the script tag. In our editor though, you won’t<br /> see the styles because the style tag is injected dynamically at runtime with<br /> JavaScript!</p> <p>Also, notice our development console information is no longer present. This is<br /> because we passed the <code>--production</code> flag to Webpack.</p> <h3><a id="Conclusion_340"></a>Conclusion</h3> <p>Understanding the build process behind the frameworks you use will help you to<br /> better understand the framework itself. Take some time to try to build an<br /> Angular, React or another Vue Project without the use of the respective CLIs.<br /> Or, just build a basic three-file site (index.html, styles.css, and app.js), but<br /> use Webpack to serve and build a production version.</p> <p>Thanks for reading!</p> <p>woz</p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/javascript?source=post" target="_blank">JavaScript</a></li> <li><a href="https://medium.freecodecamp.org/tagged/vuejs?source=post" target="_blank">Vuejs</a></li> <li><a href="https://medium.freecodecamp.org/tagged/webpack?source=post" target="_blank">Webpack</a></li> <li><a href="https://medium.freecodecamp.org/tagged/single-page-applications?source=post" target="_blank">Single Page<br /> Applications</a></li> <li><a href="https://medium.freecodecamp.org/tagged/technology?source=post" target="_blank">Technology</a></li> </ul> <h3><a id="Brandon_Wozniewiczhttpsmediumfreecodecamporgwozbrandon_359"></a><a href="https://medium.freecodecamp.org/@woz.brandon" target="_blank">Brandon Wozniewicz</a></h3> <p>Air traffic controller, instructor, writer, software engineer, and minimalist on<br /> a mission to inspire more people to ask why.<br /> <a href="http://twitter.com/BrandonWoz" target="_blank">@BrandonWoz</a></p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_365"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p> ',
                'user_id' => '2',
                'topic_id' => '1',
            ], [
                'title' => 'An introduction to JavaScript’s async and await',
                'content' => ' <p>Asynchronous JavaScript has never been easy. For a while, we used callbacks.<br /> Then, we used promises. And now, we have asynchronous functions.</p> <p>Asynchronous functions make it easier to write asynchronous JavaScript, but it<br /> comes with its own set of gotchas that makes life hard for beginners.</p> <p>In this 2-part series, I want to share everything you need to know about<br /> asynchronous functions.</p> <h3><a id="Asynchronous_functions_10"></a>Asynchronous functions</h3> <p>Asynchronous functions contain the <code>async</code> keyword. You can use it in a normal<br /> function declaration:</p> <pre><code>async function functionName (arguments) { // Do something asynchronous } </code></pre> <p>You can also use it in an arrow-function.</p> <pre><code>const functionName = async (arguments) =&gt; { // Do something asynchronous } </code></pre> <h3><a id="Asynchronous_functions_always_return_promises_25"></a>Asynchronous functions always return promises</h3> <p>It doesn’t matter what you <code>return</code>. The returned value will always be a<br /> promise.</p> <pre><code>const getOne = async _ =&gt; { return 1 } const promise = getOne() console.log(promise) // Promise </code></pre> <p>Note: You should know what are JavaScript Promises and how to use them before<br /> you move on. Otherwise, it’ll start to get confusing. Use <a href="https://zellwk.com/blog/js-promises/" target="_blank">this<br /> article</a> to help you get familiar with<br /> JavaScript promises.</p> <h3><a id="The_await_keyword_42"></a>The await keyword</h3> <p>When you call a promise, you handle the next step in a <code>then</code> call, like this:</p> <pre><code>const getOne = async _ =&gt; { return 1 } getOne() .then(value =&gt; { console.log(value) // 1 }) </code></pre> <p>The <code>await</code> keyword lets you wait for the promise to resolve. Once the promise<br /> is resolved, it returns the parameter passed into the <code>then</code> call.</p> <pre><code>const test = async _ =&gt; { const one = await getOne() console.log(one) // 1 } test() </code></pre> <h4><a id="Return_await_65"></a>Return await</h4> <p>There’s no need to <code>await</code> before returning a promise. You can return the<br /> promise directly.</p> <p>(If you <code>return await</code> something, you resolve the original promise first. Then,<br /> you create a new promise from the resolved value. <code>return await</code> effectively<br /> does nothing. No need for the extra step).</p> <pre><code>// Don’t need to do this const test = async _ =&gt; { return await getOne() } test() .then(value =&gt; { console.log(value) // 1 }) // Do this instead const test = async _ =&gt; { return getOne() } test() .then(value =&gt; { console.log(value) // 1 }) </code></pre> <p>Note: If you don’t need <code>await</code>, you don’t need to use an async function. The<br /> example above can be rewritten as follows:</p> <pre><code>// Do this instead const test = _ =&gt; { return getOne() } test() .then(value =&gt; { console.log(value) // 1 }) </code></pre> <h3><a id="Handling_errors_107"></a>Handling errors</h3> <p>If a promise results in an error, you handle it with a <code>catch</code> call, like this:</p> <pre><code>const getOne = async (success = true) =&gt; { if (success) return 1 throw new Error(‘Failure!’) } getOne(false) .catch(error =&gt; console.log(error)) // Failure! </code></pre> <p>If you want to handle an error in an asynchronous function, you need to use a<br /> <code>try/catch</code> call.</p> <pre><code>const test = async _ =&gt; { try { const one = await getOne(false) } catch (error) { console.log(error) // Failure! } } test() </code></pre> <p>If you have multiple <code>await</code> keywords, error handling can become ugly…</p> <pre><code>const test = async _ =&gt; { try { const one = await getOne(false) } catch (error) { console.log(error) // Failure! } try { const two = await getTwo(false) } catch (error) { console.log(error) // Failure! } try { const three = await getThree(false) } catch (error) { console.log(error) // Failure! } } test() </code></pre> <p>There’s a better way.</p> <p>We know that asynchronous functions always return a promise. When we call a<br /> promise, we can handle errors in a <code>catch</code> call. This means we can handle any<br /> errors from our asynchronous function by adding <code>.catch</code>.</p> <pre><code>const test = async _ =&gt; { const one = await getOne(false) const two = await getTwo(false) const three = await getThree(false) } test() .catch(error =&gt; console.log(error))) </code></pre> <p>Note: The Promise <code>catch</code> method lets you catch one error only.</p> <h3><a id="Multiple_awaits_173"></a>Multiple awaits</h3> <p><code>await</code> blocks JavaScript from executing the next line of code until a promise<br /> resolves. This may have the unintended consequence of slowing down code<br /> execution.</p> <p>To show this in action, we need to create a delay before resolving the promise.<br /> We can create a delay with a <code>sleep</code> function.</p> <pre><code>const sleep = ms =&gt; { return new Promise(resolve =&gt; setTimeout(resolve, ms)) } </code></pre> <p><code>ms</code> is the number of milliseconds to wait before resolving. If you pass in<br /> <code>1000</code> into <code>sleep</code>, JavaScript will wait for one second before resolving the<br /> promise.</p> <pre><code>// Using Sleep console.log(‘Now’) sleep(1000) .then(v =&gt; { console.log(‘After one second’) }) </code></pre> <p><span class="figcaption_hack">Console logs ‘now’ immediately. One second later, it logs ‘After one second’</span></p> <p>Let’s say <code>getOne</code> takes one second to resolve. To create this delay, we pass<br /> <code>1000</code> (one second) into <code>sleep</code>. After one second has passed and the <code>sleep</code><br /> promise resolves, we return the value 1.</p> <pre><code>const getOne = _ =&gt; { return sleep(1000).then(v =&gt; 1) } </code></pre> <p>If you <code>await getOne()</code>, you’ll see that it takes one second before <code>getOne</code><br /> resolves.</p> <pre><code>const test = async _ =&gt; { console.log(‘Now’) const one = await getOne() console.log(one) } test() </code></pre> <p><span class="figcaption_hack">Console logs ‘Now’ immediately. After one second, console logs 1</span></p> <p>Now let’s say you need to wait for three promises. Each promise has a one-second<br /> delay.</p> <pre><code>const getOne = _ =&gt; { return sleep(1000).then(v =&gt; 1) } const getTwo = _ =&gt; { return sleep(1000).then(v =&gt; 2) } const getThree = _ =&gt; { return sleep(1000).then(v =&gt; 3) } </code></pre> <p>If you <code>await</code> these three promises in a row, you’ll have to wait for three<br /> seconds before all three promises get resolved. This is not good because we<br /> forced JavaScript to wait two extra seconds before doing what we need to do.</p> <pre><code>const test = async _ =&gt; { const one = await getOne() console.log(one) const two = await getTwo() console.log(two) const three = await getThree() console.log(three) console.log(‘Done’) } test() </code></pre> <p><span class="figcaption_hack">Console shows ‘Now’ immediately. One second later, it shows 1. Another second<br /> later, it shows 2. Another second later, it shows 3 and ‘Done’ at the same time.</span></p> <p>If <code>getOne</code>, <code>getTwo</code> and <code>getThree</code> can be fetched simultaneously, you’ll save<br /> two seconds. You can fetch these three promises at the same time with<br /> Promise.all.</p> <p>There are three steps:</p> <ol> <li>Create the three promises<br> 2. Add all three promises into an array<br> 3.<br /> <code>await</code> the array of promises with <code>Promise.all</code></li> </ol> <p>Here’s what it looks like:</p> <pre><code>const test = async _ =&gt; { const promises = [getOne(), getTwo(), getThree()] console.log(‘Now’) const [one, two, three] = await Promise.all(promises) console.log(one) console.log(two) console.log(three) console.log(‘Done’) } test() </code></pre> <p><span class="figcaption_hack">Console shows ‘Now’ immediately. After one second, console shows 1, 2, 3, and<br /> ‘Done’</span></p> <p>That’s all you need to know about basic asynchronous functions! I hope this<br /> article clears things up for you.</p> <p>Note: This article is a modified excerpt from <a href="https://learnjavascript.today/" target="_blank">Learn<br /> JavaScript</a>. If you find this article useful,<br /> you might want to check it out.</p> <p>Next up, we’re going to look at asynchronous functions and its behavior in<br /> loops.</p> <hr /> <p>This article was originally posted on <a href="https://zellwk.com/blog/async-await/" target="_blank">my<br /> blog</a>.<br> Sign up for my<a href="https://zellwk.com/" target="_blank"><br /> newsletter</a> if you want more articles to help you become a<br /> better frontend developer.</p> <ul> <li><a href="https://medium.com/tag/javascript?source=post" target="_blank">JavaScript</a></li> <li><a href="https://medium.com/tag/tech?source=post" target="_blank">Tech</a></li> <li><a href="https://medium.com/tag/programming?source=post" target="_blank">Programming</a></li> <li><a href="https://medium.com/tag/web-development?source=post" target="_blank">Web Development</a></li> <li><a href="https://medium.com/tag/technology?source=post" target="_blank">Technology</a></li> </ul> <h3><a id="Zell_Liewhttpsmediumcomzellwk_307"></a><a href="https://medium.com/@zellwk" target="_blank">Zell Liew</a></h3> <p>Frontend consultant; teaching frontend to self-taught devs at zellwk.com.<br /> Currently attempting to demystify Javascript at<br /> <a href="https://learnjavascript.today/" target="_blank">https://learnjavascript.today</a></p> ',
                'user_id' => '3',
                'topic_id' => '1',
            ], [
                'title' => 'How to build a modern chat application with React.js',
                'content' => '<p>*This article was originally published on Cometchat’s<br /> *<a href="https://www.cometchat.com/tutorials/build-a-modern-chat-application-with-react" target="_blank">blog</a></p> <p>In this tutorial, I will guide you to build your own group chat application<br /> using React, React Router, and <a href="https://www.cometchat.com/pro" target="_blank">CometChat Pro</a>.<br /> Yes, rather than roll out our own server, we will instead use CometChat Pro to<br /> handle the real-time sending and receiving of chat messages.</p> <p>When you’re done, you should have a functional chat application that looks<br /> something like this (of course, you’re welcome to tweak and experiment with<br /> things as you go along):</p> <p><img src="https://cdn-images-1.medium.com/max/600/0*Xv6_K-BWwyhlXqzO.png" alt="" /></p> <p><img src="https://cdn-images-1.medium.com/max/600/0*vx2h7DmpoyxpXzso.png" alt="" /></p> <p>I have structured this tutorial as a series of steps to make it easy to follow<br /> along. If you’d just like to check out the code, <a href="https://github.com/cometchat-pro-samples/react-comet-chat-app" target="_blank">click<br /> here</a>.</p> <h3><a id="Setting_up_the_project_21"></a>Setting up the project</h3> <p>Before we go too far, we must first set up our React project. To do this, we’ll<br /> use a lesser-known gem called Create React App.</p> <p>The best thing? Because you have npm installed, you can use npx to install and<br /> run create-react-app in one step:</p> <p><code>npx create-react-app chatapp // note: npm v5.2+</code></p> <p>After running this command, a new folder called “chatapp” will be created with<br /> the following structure:</p> <p><img src="https://cdn-images-1.medium.com/max/600/0*3qa3VQVvpkDzGUJg.png" alt="" /></p> <p>In addition, to React, we will also need to install React Router and CometChat<br /> Pro SDK. To do this, head to the chatapp directory and run:</p> <p><code>npm install react-router-dom @cometchat-pro/chat --save</code></p> <h3><a id="Add_React_Router_41"></a>Add React Router</h3> <p>In the end, our application will have two pages — one called <code>Login</code> where the<br /> user will log in, and another called <code>Groupchat</code> where we will render the chat<br /> room. We will use React Router to route users to the page they need.</p> <p>To setup React Router, we must first import the <code>Router</code> <em>wrapper</em> component in<br /> our index.js file. I call it a wrapper component because we wrap our <code>App</code><br /> inside the <code>Router</code> component.</p> <p>Replace index.js with this snippet:</p> <p><code>index.js</code> is the entry point for our application. Its only real job is to<br /> render our React application. Most of our “real” logic happens in a file called<br /> App.js, which we will modify next.</p> <p>In App.js, we must import additional React Router dependencies which will enable<br /> us to render different components depending on what route the user has loaded.<br /> For example, if the user goes to the “/login” route, we should render the Login<br /> component. Likewise, if the user goes to the “/chat” route, we should render the<br /> <code>Groupchat</code> component:</p> <p>If you try to run this code it will definitely throw some errors because we<br /> haven’t made the <code>Login</code> and <code>Groupchat</code> components. Let’s do that now.</p> <h3><a id="Create_the_Login_component_68"></a>Create the Login component</h3> <p>To keep our project nice and tidy, create a folder called <code>components</code> to hold<br /> our custom components.</p> <p>Then, in that newly-created folder, create a file called Login.js with the<br /> following code:</p> <p>All we’re doing here is exporting a component with the heading text, “Login”.<br /> We’ll flesh this component out soon but for right now, we are merely creating<br /> boilerplate.</p> <h3><a id="Create_the_Groupchat_component_81"></a>Create the Groupchat component</h3> <p>In the same components folder, create a new component called Groupchat.js:</p> <p>As we progress through the tutorial, we will develop this humble component into<br /> the core of our chat application.</p> <p>With the <code>Groupchat</code> and <code>Login</code> components in place, you should be able to run<br /> the application without an error. Open the app on localhost and navigate to<br /> localhost:3000/login and then localhost:3000/chat to see the components in<br /> action.</p> <h3><a id="Create_the_CometChat_APP_ID_and_API_key_94"></a>Create the CometChat APP ID and API key</h3> <p>Like I mentioned at the beginning of the tutorial, we won’t be rolling out our<br /> own server in this tutorial. Instead, we’ll be using a hosted service of<br /> <a href="http://cometchat.com/pro" target="_blank">CometChat Pro</a>.</p> <p>Before we can connect to CometChat, we must first create a CometChat application<br /> from the dashboard:</p> <p><img src="https://cdn-images-1.medium.com/max/600/0*C0I3sQUWBTNFdosn.png" alt="" /></p> <p>Once your application has been created, hit “Explore” then head to the “API<br /> Keys” tab:</p> <p>Click “Create API key” and fill in the form, choosing Auth Only scope. From the<br /> table, you can note your application ID and application key, we’ll need these<br /> shortly.</p> <h3><a id="Create_the_CometChat_group_ID_112"></a>Create the CometChat group ID</h3> <p>While we have the dashboard open, let’s also create a <em>group</em>. Normally you’d do<br /> this with code (for example, you might allow the user to create a custom chat<br /> group for their team or project through your app) but for learning and testing,<br /> the dashboard is fine.</p> <p>Head to the “Groups” tab and create a new group called testgroup:</p> <p>Like last time, you’ll be taken back to a table where you can note the group ID:</p> <p>Take note as we’ll need this in the next step.</p> <h3><a id="Create_the_configuration_file_125"></a>Create the configuration file</h3> <p>To make it easy to reference our configuration, create a new file called<br /> config.js and paste your credentials:</p> <p>You can now close the dashboard. Once you setup CometChat, all interaction<br /> happens through code.</p> <h3><a id="Create_a_CometChat_Manager_class_134"></a>Create a CometChat Manager class</h3> <p>One of the beautiful things about React is that it lends itself to a separation<br /> of concerns. Our components can focus purely on presentation while we can create<br /> other modules to handle things like data fetching and state management.</p> <p>To really take advantage of this, let’s create a new folder called “lib” and in<br /> that new folder, a file called chat.js. This is where all of our interaction<br /> with CometChat will take place:</p> <p>Aside from allowing us to create a separation of concerns, presenting the code<br /> like this also makes it easier to digest.</p> <p>Let me explain some important parts of this module, starting from the top:</p> <ul> <li><code>LISTENER_KEY_MESSAGE</code> – This is required by the message listener.</li> <li><code>init()</code> – This is required to be called only once throughout the lifecycle of<br /> the application, it calls the CometChat <code>init</code> method with the appID.</li> <li><code>getTextMessage(uid, text, msgType)</code> – it creates the message object based on<br /> <code>CometChat.TextMessage</code>method, it accepts the UID (GUID in our case) and the<br /> text message to send.</li> <li><code>getLoggedInUser()</code> – it’s used to get the currently logged in user.</li> <li><code>login()</code> – it’s used to log in a user based on the CometChat.login method, it<br /> takes in the UID (GUID in our case) and the apiKey.</li> <li><code>getGroupMessages(GUID, callback, limit = 30)</code> – this is used to get the<br /> previous group messages from CometChat using the<br /> <code>CometChat.MessagesRequestBuilder()</code> method that takes in the GUID and limit as<br /> parameters.</li> <li><code>sendGroupMessage(UID, message)</code>– this is used to send messages using the<br /> <code>CometChat.sendMessage()</code> method and it accepts the GUID and message as<br /> parameters.</li> <li><code>joinGroup(GUID)</code> – It’s used to join a chosen group using a GUID.</li> <li><code>addMessageListener(callback)</code> – Uses the <code>CometChat.addMessageListener()</code> to<br /> listen to messages (did I mention this is called in real-time?), it requires the<br /> <code>LISTENER_KEY_MESSAGE</code> as a parameter and also a callback that is called when a<br /> message is received.</li> </ul> <p>There’s nothing specific to this application here. You could well take this<br /> module, expand it if needed, and import it into another project. Generally,<br /> though, this is just a thin wrapper around the SDK.</p> <h3><a id="Update_the_login_component_176"></a>Update the login component</h3> <p>With all our configuration and chat code in place, we can now rapidly build out<br /> the UI starting with the <code>Login</code> component.</p> <p>Just to remind you, this is what the Login component will look like:</p> <p>As you can see, its main function is to ask the user for their name. Once a name<br /> is supplied, we render the <code>Groupchat</code> component.</p> <p>Replace <code>Login.js</code> with:</p> <p>Aside from the presentational HTML, most code here is dedicated to handling a<br /> <a href="https://reactjs.org/docs/forms.html" target="_blank">React form</a>.</p> <h3><a id="Update_the_Groupchat_component_192"></a>Update the Groupchat component</h3> <p>The Groupchat component has a lot more responsibility than the Login component.<br /> As a quick reminder, this is what it will look like:</p> <p>For the most part, the <code>Groupchat</code> component’s job is to bridge the chat lib<br /> module and the UI we’ll present to the user. For example, when a user sends a<br /> message, we call <code>chat.sendMessage</code> and as new messages trickle in, a callback<br /> function is called:</p> <p>There’s a lot to digest here, so let’s break the important parts down:</p> <ul> <li><code>sendMessage()</code> – This function handles sending a message to the group, passing<br /> the GUID and the text message that is stored is in the component’s state. If the<br /> user is not part of the group we then make a request to join the group and then<br /> call the sendMessage function again.</li> <li><code>scrollToBottom()</code> – This function will be used as a callback function for the<br /> message listener, it just makes sure that the latest messages are shown in the<br /> chat list.</li> <li><code>handleSubmit()</code> – This calls the sendMessage function.</li> <li><code>getUser()</code> – This calls the chat.getLoggedInUser() method and stores the user<br /> object in the component’s state.</li> <li><code>messageListener()</code> – This calls the chat.addMessageListener() function and<br /> appends every new message received to the <code>groupMessage</code> array which is stored<br /> in the component’s state and rendered in the app.</li> <li><code>componentDidMount()</code> – This calls the getUser and messageListener functions.</li> </ul> <p>Finally, we render a class depending on if the message is ours or someone<br /> else’s. This way, we can apply different styles which is the topic of the next<br /> section.</p> <h3><a id="Update_the_styles_224"></a>Update the styles</h3> <p>If you were to run the application now, it would work but with no CSS to speak<br /> of thus far, it would look quite uh, odd.</p> <p>This isn’t a tutorial about CSS so I won’t explain it in any detail, but to help<br /> you follow along, you can paste the following into your App.css file (you will<br /> have one already because it was generated by <code>create-react-app</code> earlier):</p> <h3><a id="Conclusion_234"></a>Conclusion</h3> <p>Run the application with <code>npm start</code> and low and behold, your chat application<br /> is complete. At least, the basic functionality is in place. With CometChat, you<br /> could easily expand the app to include a “who’s online list”, direct messages,<br /> media messages, and a bunch of other features.</p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/javascript?source=post" target="_blank">JavaScript</a></li> <li><a href="https://medium.freecodecamp.org/tagged/react?source=post" target="_blank">React</a></li> <li><a href="https://medium.freecodecamp.org/tagged/software-development?source=post" target="_blank">Software<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/web-development?source=post" target="_blank">Web<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/programming?source=post" target="_blank">Programming</a></li> </ul> <h3><a id="Samuel_Omolehttpsmediumfreecodecamporgsamuelomole_249"></a><a href="https://medium.freecodecamp.org/@samuelomole" target="_blank">Samuel Omole</a></h3> <p>Software developer, consultant, tutor, ❤🎸</p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_253"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p> <p>can someone tell me what’s the difference between ./ and …/ ?</p> <p><code>./</code> is used to access files within the same folder while <code>../</code> can be used to<br /> access files one level above.</p> <p>nice brother</p> <p>Samuel Omole excuse me sir, but there is something i want to ask. I tried to<br /> follow the tutorial and done it. But when i tried to login i cant seem to get<br /> the username. It show warning when i run “npm start” Module not found: Can’t<br /> resolve ‘react-native’ in<br /> ‘D:\My\Directory\chat-app\node_modules@cometchat-pro\chat’. Do we need<br /> react-native in this chat app or i am missing something. Thanks in advance</p> <p>hmmm…is there a repository I could look at? So I can see whats wrong.</p> ',
                'user_id' => '4',
                'topic_id' => '1',
            ], [
                'title' => 'How to easily scrape websites for info using Standard Library and Node.js',
                'content' => ' <p>A web scraper is a tool that allows us to select and transform a website’s<br /> unstructured data into a structured database. So where would a web scraper come<br /> in handy? I have listed my favorite use cases to get you excited about launching<br /> your own!</p> <p><img src="https://cdn-images-1.medium.com/max/900/1*-DBbNhQcVm_ssUd4Om2oUA.png" alt="" /><br /> <span class="figcaption_hack"><a href="https://www.quora.com/What-are-examples-of-how-real-businesses-use-web-scraping-Are-there-any-types-of-businesses-which-use-this-more-than-others" target="_blank">This question on<br /> Quora</a><br /> encouraged me to build my web scraper.</span></p> <ul> <li>Scrape real estate listings — businesses are using web scraping to gather<br /> already listed properties</li> <li>Scrape products/product reviews from retailer or manufacturer websites to show<br /> in your site, provide specs/price comparison</li> <li>Scrape news websites to apply custom analysis and curation (manual or<br /> automatic), provide better-targeted news to your audience</li> <li>Gathering email addresses for lead generation</li> </ul> <p>You can read other handy use cases for a <a href="https://www.quora.com/What-are-examples-of-how-real-businesses-use-web-scraping-Are-there-any-types-of-businesses-which-use-this-more-than-others" target="_blank">web scraper<br /> here</a>.</p> <p>Now Let’s get started! As a simple example —<a href="https://news.ycombinator.com/" target="_blank"> we’ll scrape the front page of<br /> Hacker News</a> to fetch the titles of links.</p> <p><em>If you’re not familiar with <em><a href="https://stdlib.com/?utm_source=content&amp;utm_medium=blog&amp;utm_campaign=scrape_service" target="_blank">Standard<br /> Library</a></em><br /> yet, you’re in for a treat! <em><a href="https://medium.com/@StdLibHQ" target="_blank">Standard Library</a></em><br /> is an API development and publishing platform that can help you build and ship<br /> code in record time using the in-browser API editor —</em><a href="https://code.stdlib.com/" target="_blank">Code on Standard<br /> Library.</a></p> <h3><a id="Step_One_Sign_in_to_Code_on_Standard_Library_32"></a>Step One: Sign in to Code on Standard Library</h3> <p>The first step is to head over to<br /> <a href="https://code.stdlib.com/" target="_blank">https://code.stdlib.com</a>/ and create a free account.<br /> <a href="https://code.stdlib.com/" target="_blank">Code on Standard Library</a> is an online API editor<br /> built by the team at<a href="https://stdlib.com/?utm_source=content&amp;utm_medium=blog&amp;utm_campaign=scrape_service" target="_blank"> Standard<br /> Library</a><br /> — an embeddable development environment for quickly building APIs, webhooks, and<br /> workflow automation tasks.</p> <p>On the bottom left corner click <strong>(sign in)</strong>. If you have a<br /> <a href="https://stdlib.com/?utm_source=content&amp;utm_medium=blog&amp;utm_campaign=scrape_service" target="_blank">Standard</a><br /> <a href="https://stdlib.com/?utm_source=content&amp;utm_medium=blog&amp;utm_campaign=scrape_service" target="_blank">Library</a><br /> account click, <strong>Already Registered,</strong> and sign in using your <a href="https://stdlib.com/?utm_source=content&amp;utm_medium=blog&amp;utm_campaign=scrape_service" target="_blank">Standard<br /> Library</a><br /> credentials. A modal will pop up prompting you to claim a namespace** **(this is<br /> your username). Input your e-mail and choose a password.</p> <p>After you create your account, a different module will appear listing the<br /> subscription plans. A free account is all you need to get started, but you <a href="https://stdlib.com/pricing" target="_blank">can<br /> read more about Standard Library’s pricing packages<br /> here</a>.</p> <p>Once you click <strong>Subscribe + Earn Credits,</strong> you should see a confirmation<br /> message pop up.</p> <p>Click <strong>Continue</strong> to return to the landing page.</p> <h3><a id="Step_Two_Select_the_Web_Scraper_Sourcecode_60"></a>Step Two: Select the Web Scraper Sourcecode</h3> <p>Select **API from sourcecode <strong>button</strong>. **<a href="https://stdlib.com/?utm_source=content&amp;utm_medium=blog&amp;utm_campaign=scrape_service" target="_blank">Standard<br /> Library</a><br /> Sourcecodes are designed to streamline the creation of different types of<br /> projects. Sourcecodes provide defaults for things like boilerplate code and<br /> directory setup so you can get right to the development and implementation of<br /> more complex functionality.</p> <p>You should see a list of published sourcecodes. Scroll down and select<br /> <strong>@nemo/web -scraper</strong>. Make sure to enter your desired name for your API and<br /> hit <strong>Okay</strong> (or press enter)</p> <p>You will then see your endpoint’s code under: <code>functions/__main__.js</code></p> <p><img src="https://cdn-images-1.medium.com/max/600/1*owqsessjwq39-cbYI5glLw.png" alt="" /></p> <p>On the right side you will notice a parameters box.</p> <p>In the URL required parameter type:</p> <p><code>https://news.ycombinator.com/</code></p> <p>In the queries type:</p> <p><code>[[&quot;.storylink&quot;, &quot;text&quot;]]</code></p> <p>Select the green “<strong>Run</strong>” button.</p> <p>Within seconds you should have a list of link titles from the front page of<br /> <a href="https://news.ycombinator.com/" target="_blank">Hacker News</a> under the <strong>Results</strong> section of<br /> <a href="https://code.stdlib.com/" target="_blank">Code on Standard Library</a>. You will notice a<br /> documentation portal — copy and paste the Documentation URL into a new tab in<br /> your browser to see your API’s information on Standard Library.</p> <p><img src="https://cdn-images-1.medium.com/max/600/1*KJygl5ov7-iN7yjfyrr-wQ.png" alt="" /></p> <h3><a id="How_It_Works__97"></a>How It Works 🤓</h3> <p>The web scraper makes a simple GET request to a URL, and runs a series of<br /> queries on the resulting page and returns it to you. It uses the powerful<br /> <a href="https://github.com/cheeriojs/cheerio" target="_blank">cheerio</a> DOM (Document Object Model)<br /> processor, enabling us to use<a href="https://www.w3schools.com/cssref/css_selectors.asp" target="_blank"><br /> CSS-selectors</a> to grab data<br /> from the page! CSS selectors are patterns used to select the element(s) you want<br /> to organize.</p> <h3><a id="How_to_Query_Using_CSS_Selectors_107"></a><strong>How to Query Using CSS Selectors</strong></h3> <p>Web pages are written in <a href="https://en.wikipedia.org/wiki/Markup_language" target="_blank">markup<br /> language</a>s such as HTML <a href="https://www.w3schools.com/Html/html_elements.asp%5D" target="_blank">An HTML<br /> element</a> is one component of<br /> an HTML document or web page. Elements define the way information is displayed<br /> to the human eye on the browser- information such as images, multimedia, text,<br /> style sheets, scripts etc.</p> <p>For this example, we used the “<a href="https://www.w3schools.com/cssref/css_selectors.asp" target="_blank">.class” selector<br /> </a>(class = “.storylink” ) to<br /> fetch the titles of all hyperlinks from all elements in the front page of Hacker<br /> News.</p> <p>If you are wondering how to find the names of the elements that make up a<br /> website - allow me to show you!</p> <p>Fire up <a href="https://www.google.com/chrome/?brand=CHBD&amp;gclid=EAIaIQobChMI87WK1Iya3AIVh_hkCh1hMgIIEAAYASAAEgKilfD_BwE&amp;gclsrc=aw.ds&amp;dclid=CLuW3dWMmtwCFcq5ZAodXTwHBA" target="_blank">Google<br /> Chrome</a><br /> and type in our <a href="https://news.ycombinator.com/" target="_blank">Hacker News</a> URL address<br /> <code>https://news.ycombinator.com/</code>. Then right-click on the title of any article<br /> and select “<strong>inspect.</strong>” This will open the Web Console on Google Chrome. Or<br /> you can use **command key **(<strong>⌘) + option key (⌥ ) + J key.</strong></p> <p><img src="https://cdn-images-1.medium.com/max/600/1*D-9KCvnHgZmsJrTwMfbVHg.png" alt="" /><br /> <span class="figcaption_hack">Right Click and Select Inspect</span></p> <p>The web-developer console will open to the right of your screen. Notice that<br /> when you selected the title of a link a section on the console is also<br /> highlighted. The highlighted element has “class” defined as “storylink.” And now<br /> you know how to find the names of elements on any site!</p> <p><img src="https://cdn-images-1.medium.com/max/600/1*2NlgJ_bQ4GKTnWZYZWsRQA.png" alt="" /></p> <p>If you want to query different metadata on <a href="https://news.ycombinator.com/" target="_blank">Hacker<br /> News</a>, hover your cursor over it. Below you can<br /> see how that I found the .class selector = “sitestr” to query a link’s URL by<br /> hovering my mouse over that element on Hacker News.</p> <p><img src="https://cdn-images-1.medium.com/max/900/1*xLTlCTcRTTmaUJkMP1mItA.png" alt="" /></p> <h3><a id="Thats_It_and_Thank_You_148"></a>That’s It, and Thank You!</h3> <p>Thanks for reading! I would love for you to <strong>comment here</strong>,** e-mail me at<br /> Janeth [at] stdlib [dot] com**, or follow <a href="http://www.stdlib.com/?utm_source=content&amp;utm_medium=blog&amp;utm_campaign=scrape_service" target="_blank">Standard<br /> Library</a><br /> on Twitter, <a href="https://twitter.com/StdLibHQ" target="_blank">@StdLibHQ</a> . Let me know if you’ve<br /> built anything exciting that you would like Standard Library team to feature or<br /> share — I’d love to help!</p> <hr /> <p><em>Janeth Ledezma is a Developer Advocate for Standard Library and Berkeley grad—<br /> go bears! 🐻 When she isn’t learning the Arabic language, or working out, you<br /> can find her riding her CBR500R. 🏍💨 Follow her journey with Standard Library<br /> on Twitter <em><a href="https://twitter.com/mss_ledezma" target="_blank">@mss_ledezma</a></em>.</em></p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/web-development?source=post" target="_blank">Web<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/nodejs?source=post" target="_blank">Nodejs</a></li> <li><a href="https://medium.freecodecamp.org/tagged/javascript?source=post" target="_blank">JavaScript</a></li> <li><a href="https://medium.freecodecamp.org/tagged/programming?source=post" target="_blank">Programming</a></li> <li><a href="https://medium.freecodecamp.org/tagged/tech?source=post" target="_blank">Tech</a></li> </ul> <h3><a id="Janeth_Ledezmahttpsmediumfreecodecamporgjaneth_10755_171"></a><a href="https://medium.freecodecamp.org/@janeth_10755" target="_blank">Janeth Ledezma</a></h3> <p>Janeth is a Developer Advocate for Standard Library.</p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_175"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p> ',
                'user_id' => '5',
                'topic_id' => '2',
            ], [
                'title' => '4 reasons your z-index isn’t working (and how to fix it)',
                'content' => ' <p>Z-index is a CSS property that allows you to position elements in layers on top<br /> of one another. It’s super useful, and honestly a very important tool to know<br /> how to use in CSS.</p> <p>Unfortunately, z-index is one of those properties that doesn’t always behave in<br /> an intuitive way. It seems simple at first- a higher z-index number means the<br /> element will be on top of elements with lower z-index numbers. But there are<br /> some additional rules that make things more complicated. And you can’t always<br /> fix things by setting the z-index to 999999! 😪</p> <p>This article will explain in detail four of the most common reasons that z-index<br /> isn’t working for you, and exactly how you can fix it.</p> <p>We’ll be going through some actual code examples and problem-solving them. After<br /> reading this article, you’ll be able to understand and avoid those common<br /> z-index pitfalls!</p> <p>Let’s check out the first reason:</p> <h3><a id="1_Elements_in_the_same_stacking_context_will_display_in_order_of_appearance_20"></a>1. Elements in the same stacking context will display in order of appearance,</h3> <p>with latter elements on top of former elements.</p> <p>In our first example, we have a relatively simple layout that includes 3 main<br /> elements:</p> <ul> <li>An image of a cat</li> <li>A white block with text</li> <li>Another image of the same cat</li> </ul> <p>Here’s the HTML markup for that:</p> <p>In this layout, we ideally want the white block of text to be on top of both<br /> cats.</p> <p>To try to achieve this, we’ve added some negative margins to the CSS for both<br /> cat images, so that they overlap the white block a bit:</p> <p>However, it looks like this:</p> <p>The first cat is indeed positioned underneath the white content block, just like<br /> we want. But the second cat image is positioned on top of the block!</p> <p>Why is this happening?</p> <p>The reason for this behavior is due to the <strong>natural stacking order</strong> on the<br /> webpage. These guidelines basically determine which elements will be on top and<br /> which will be on the bottom.</p> <p>Even if elements don’t have their z-index set, there is a rhyme and reason to<br /> which ones will be on top.</p> <p>In our case, none of the elements have a z-index value. So their stacking order<br /> is determined by their order of appearance. According to this rule, elements<br /> that come later in the markup will be on top of elements that come before them.</p> <p>(You can read more of the stacking order guidelines at Mozilla Developer Network<br /> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context" target="_blank">here</a>.)</p> <p>In our example with the cats and the white block, they are obeying this rule.<br /> That’s why the first cat is underneath the white block element, and the white<br /> block is underneath the second cat.</p> <p>Ok, stacking order is all well and good, but how do we fix the CSS so the second<br /> cat is underneath the white block?</p> <p>Let’s look at the second reason:</p> <h3><a id="2_The_element_doesnt_have_its_position_set_73"></a>2. The element doesn’t have its position set</h3> <p>One of the other guidelines that determine stacking order is if an element has<br /> its position set or not.</p> <p>To set position for an element, add the CSS <code>position</code> property to anything<br /> other than <code>static</code>, like <code>relative</code> or <code>absolute</code>. (You can read more about it<br /> in <a href="https://coder-coder.com/css-position-layout/" target="_blank">this article</a> that I wrote.)</p> <p>According to this rule, positioned elements will display on top of unpositioned<br /> elements.</p> <p>So setting the white block to be <code>position: relative</code>, and leaving the two cat<br /> elements unpositioned will put the white block on the top of the cats in the<br /> stacking order.</p> <p>This is how it will look- you can also play around with the Codepen above.</p> <p>Woohoo!</p> <p>Now, the next thing we want to do is rotate the bottom cat upside down, using<br /> the <code>transform</code> property. That way, both cats will be underneath the white<br /> block, with only their heads sticking out.</p> <p>But doing so can cause more <code>z-index</code>-related confusion. We’ll address the<br /> problem and the solution in the next part.</p> <h3><a id="3_Setting_some_CSS_properties_like_opacity_or_transform_will_put_the_element_in_100"></a>3. Setting some CSS properties like opacity or transform will put the element in</h3> <p>a new stacking context.</p> <p>As we just mentioned, we want to turn the bottom cat upside down. To accomplish<br /> this, we’ll add <code>transform: rotate(180deg)</code>.</p> <p>But this causes the bottom cat to be displayed on top of the white block again!</p> <p><em>What the heck is going on here??</em></p> <p>You may not run into this issue often, but another aspect of stacking order is<br /> that some CSS properties like <code>transform</code> or <code>opacity</code> will put the element into<br /> its own, new <a href="https://www.w3.org/TR/css-color-3/#transparency" target="_blank">stacking<br /> context</a>.</p> <p>What this means is that adding the <code>transform</code> to the <code>.cat-bottom</code> element<br /> makes it behave as if it had a <code>z-index</code> of 0. Even though it doesn’t have its<br /> <code>position</code> or <code>z-index</code> set at all! (W3.org has some informative but <a href="https://www.w3.org/TR/css-color-3/#transparency" target="_blank">rather<br /> dense documentation</a> on how<br /> this works with the <code>opacity</code> property)</p> <p>Remember, we never added a <code>z-index</code> value to the white block, only <code>position: relative</code>. This was enough to position the white block on top of the<br /> unpositioned cats.</p> <p>But since the <code>.bottom-cat</code> element is acting as though it is relatively<br /> positioned with <code>z-index: 0</code>, transforming it has positioned it on top of the<br /> white block.</p> <p>The solution to this is to set <code>position: relative</code> and explicitly set <code>z-index</code><br /> on at least the white block. You could go one step further and set <code>position: relative</code> and a lower <code>z-index</code> on the cat elements, just to be extra safe.</p> <p>In my opinion, doing this will solve most, if not all of the more basic z-index<br /> issues.</p> <p>Now, let’s move on to our last reason that your <code>z-index</code> isn’t working. This<br /> one is a bit more complex, because it involves parent and child elements.</p> <h3><a id="4_The_element_is_in_a_lower_stacking_context_due_to_its_parents_zindex_level_142"></a>4. The element is in a lower stacking context due to its parent’s z-index level</h3> <p>Let’s check out our code example for this:</p> <p>Here’s what we have: a simple webpage with regular content, and a pink side tab<br /> that says “Send Feedback” that is positioned on top of the content.</p> <p>Then, when you click on the photo of the cat, a modal window with a transparent<br /> gray background overlay opens up.</p> <p>However, even when the modal window is open, the side tab is still on top of the<br /> gray overlay. We want the overlay to be displayed over everything, including the<br /> side tab.</p> <p>Let’s take a look at the CSS for the elements in question:</p> <p>All the elements have their position set, and the side tab has a <code>z-index</code> of 5,<br /> which positions it on top of the content element, which is at <code>z-index: 1</code>.</p> <p>Then, the modal has <code>z-index: 100</code> which <em>should</em> put it on top of the side tab<br /> at <code>z-index: 5</code>. But instead, the modal overlay is underneath the side tab.</p> <p>Why is this happening?</p> <p>Previously, we addressed some factors that go into the stacking context, such as<br /> if the element has its position set, as well as its order in the markup.</p> <p><strong>But yet another aspect of stacking context is that a child element is limited<br /> to the stacking context of its parent.</strong></p> <p>Let’s take a closer look at the three elements in question.</p> <p>Here’s the markup we have:</p> <p>Looking at the markup, we can see that the content and side tab elements are<br /> siblings. That is, they exist at the same level in the markup (this is different<br /> from z-index level). And the modal is a child element of the content element.</p> <p>Because the modal is inside the content element, its <code>z-index</code> of 100 only has<br /> an effect inside its parent, the content element. For example, if there were<br /> other child elements that were siblings to the modal, their <code>z-index</code> values<br /> would put them on top of or underneath each other.</p> <p>But the <code>z-index</code> value of those child elements doesn’t mean anything outside<br /> the parent, because the parent content element has its <code>z-index</code> set to 1.</p> <p>So its children, including the modal, can’t break out of that <code>z-index</code> level.</p> <p>(You can remember it with this slightly depressing metaphor: a child can be<br /> limited by its parents, and can’t break free of them.)</p> <p>There are a couple of solutions to this problem:</p> <h3><a id="Solution_Move_the_modal_outside_of_the_content_parent_and_into_the_main_199"></a>Solution: Move the modal outside of the content parent, and into the main</h3> <p>stacking context of the page.</p> <p>The corrected markup would then look like this:</p> <p>Now, the modal element is a sibling element to the two others. This puts all<br /> three elements in the same stacking context as them, so each of their z-index<br /> levels will now affect one another.</p> <p>In this new stacking context, the elements will display in the following order,<br /> from top to bottom:</p> <ul> <li>modal (<code>z-index: 100</code>)</li> <li>side tab (<code>z-index: 5</code>)</li> <li>content (<code>z-index: 1</code>)</li> </ul> <h3><a id="Alternative_Solution_Remove_positioning_from_the_content_so_it_wont_limit_the_218"></a>Alternative Solution: Remove positioning from the content, so it won’t limit the</h3> <p>modal’s z-index.</p> <p>If you don’t want to or can’t change the markup, you can fix this problem by<br /> removing the <code>position</code> setting from the content element:</p> <p>Since the content element is now unpositioned, it will no longer limit the<br /> modal’s <code>z-index</code> value. So the open modal will be positioned on top of the side<br /> tab element, due to its higher <code>z-index</code> of 100.</p> <p>While this does work, I personally would go for the first solution.</p> <p>Because if for some reason in the future you have to position the content<br /> element, it will again limit the modal’s order in the stacking context.</p> <h3><a id="In_Summary_236"></a>In Summary</h3> <p>I hope that you’ve found this tutorial helpful! To sum up, most issues with<br /> z-index can be solved by following these two guidelines:</p> <ol> <li>Check that the elements have their position set and z-index numbers in the<br /> correct order.</li> <li>Make sure that you don’t have parent elements limiting the <code>z-index</code> level of<br /> their children.</li> </ol> <p>Resources:</p> <ul> <li><a href="https://www.w3.org/TR/css-color-3/#transparency" target="_blank">W3.org: Transparency: the ‘opacity’<br /> property</a></li> <li><a href="https://www.w3.org/TR/CSS21/visuren.html#layers" target="_blank">W3.org: Specifying the stack<br /> level</a></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context" target="_blank">Mozilla Developer Network: The Stacking<br /> Context</a></li> <li><a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/" target="_blank">PhilipWalton.com: What No One Told You About<br /> Z-index</a></li> <li><a href="https://www.smashingmagazine.com/2009/09/the-z-index-css-property-a-comprehensive-look/" target="_blank">Smashing Magazine: The Z-index CSS<br /> Property</a></li> </ul> <hr /> <h4><a id="Want_more_261"></a>Want more?</h4> <p>📃 Read more tutorials on my blog,<br /> <a href="https://coder-coder.com/" target="_blank">coder-coder.com.</a><br> 📮 <a href="https://coder-coder.com/subscribe" target="_blank">Sign up here to get emails<br /> about new articles</a>.<br> 📸 Join 25,000+<br /> others — Follow <a href="https://www.instagram.com/thecodercoder/" target="_blank">@thecodercoder on<br /> Instagram</a>.</p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/css?source=post" target="_blank">CSS</a></li> <li><a href="https://medium.freecodecamp.org/tagged/web-development?source=post" target="_blank">Web<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/coding?source=post" target="_blank">Coding</a></li> <li><a href="https://medium.freecodecamp.org/tagged/programming?source=post" target="_blank">Programming</a></li> <li><a href="https://medium.freecodecamp.org/tagged/tech?source=post" target="_blank">Tech</a></li> </ul> <h3><a id="Jessica_Chanhttpsmediumfreecodecamporgthecodercoder_276"></a><a href="https://medium.freecodecamp.org/@thecodercoder" target="_blank">Jessica Chan</a></h3> <p>practical tips for the beginner web developer |<br /> <a href="https://coder-coder.com/" target="_blank">https://coder-coder.com</a></p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_281"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p> ',
                'user_id' => '6',
                'topic_id' => '3',
            ], [
                'title' => 'CSS rules that will make your life easier',
                'content' => ' <p>After years of writing and maintaining a couple of very large web projects and<br /> numerous smaller ones, I have developed some heuristics for writing maintainable<br /> CSS. I have used BEM, SMACSS, and CSS Modules for naming, though this article is<br /> not about naming, per se. (I tend to use a mix of atomic classes and BEM-ish<br /> naming.) This article is more about the properties and values I use or avoid.</p> <blockquote> <p>My StyleLint config:<br /> <a href="https://github.com/NickGard/css-utils/blob/master/stylelint.config.json" target="_blank">https://github.com/NickGard/css-utils/blob/master/stylelint.config.json</a></p> </blockquote> <h4><a id="Colors_10"></a>Colors</h4> <p>A pet peeve of mine is an over-abundance of color values in a web project. A<br /> large, long-lived project I worked on a few years ago had over 300 unique colors<br /> declared across 40-some CSS files. A third of these were shades of grey. Brand<br /> colors were repeated with slight differences of hue. Many of these colors<br /> differed by literally imperceptible values, like <code>#3426D1</code> and <code>#3426D2</code>. The<br /> solution to this is to either use atomic color classes or variables (in SCSS or<br /> CSS) for the accepted brand colors.</p> <p>Limiting the number of accepted colors has the added benefit of making it simple<br /> to ensure that the background and foreground colors meet the WCAG2.0 Color<br /> Contrast guidelines.</p> <p>Another bug-prone practice is using alpha-channel colors, usually by declaring<br /> the color with <code>rgba()</code> or <code>hsla()</code> functions. A color created this way with an<br /> alpha channel value of anything other than <code>1</code> is semi-opaque. The perceived<br /> color now changes depending on what is in the <em>background</em>. Usually, the desired<br /> color is what this one looks like over a white background, so you can use a hex<br /> value instead. Some preprocessor functions, like SASS’s <code>lighten()</code>, will<br /> generate a semi-opaque color, so stick to hard-coded values or variables.</p> <h4><a id="Typography_32"></a>Typography</h4> <p>All properties that affect or are affected by the font should be declared <em>once</em><br /> together. Right after declaring any <code>@font-face</code> rules, I like to add atomic<br /> classes for the font that change the <code>font-size</code> (via <code>rem</code>) and include<br /> <code>line-height</code>, <code>letter-spacing</code>, and <code>word-spacing</code> that are appropriate for<br /> that combination of font and size. After that, no <code>font-*</code> or <code>text-*</code> (with the<br /> exception of <code>text-overflow</code>) property should be used in any ruleset.</p> <p>Declaring these properties once in conjunction with the font-face ensures that<br /> the copy on the site always looks right. Adjusting the <code>line-height</code> instead of<br /> <code>padding</code> or <code>margin</code> will create bugs when the text wraps. Adjusting<br /> <code>font-weight</code> separately from the font declaration runs the risk of creating a<br /> <a href="https://alistapart.com/article/say-no-to-faux-bold/" target="_blank">faux bold font</a>. Changing<br /> <code>font-style</code> on a font that doesn’t support it creates a faux oblique.</p> <p>Lastly, avoid setting font sizes in anything other than <code>rem</code> units. Using <code>em</code><br /> causes problems when nesting elements because <code>em</code> is a scalar multiple of the<br /> <em>current</em> <code>font-size</code>. Using <code>px</code> (or any other “fixed” measurement) risks<br /> creating copy that is difficult to read <strong>and</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size#Pixels" target="_blank">impossible for the user to<br /> adjust</a>.<br /> Allow the user (or the user’s browser) to set the <code>font-size</code> to what is right<br /> for them by not declaring a <code>font-size</code> on the <code>body</code> or <code>html</code> element and only<br /> using <code>rem</code>.</p> <h4><a id="Spacing_57"></a>Spacing</h4> <p>On a content-first site, spacing should complement copy. Any static measurement,<br /> like <code>padding: 4px</code>, looks wrong at <em>some</em> font size. A dynamic measurement<br /> responsive to font sizes, like <code>padding: .5em</code>, looks right at every font size.</p> <p>Use <code>em</code> for spacing properties.</p> <h4><a id="Grid_65"></a>Grid</h4> <p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout" target="_blank">CSS Grid</a> is<br /> <a href="https://caniuse.com/#search=grid" target="_blank">very well supported</a> (back to IE10!) and<br /> allows the arranging of content in two dimensions without added container<br /> elements like Bootstrap’s <code>row</code> or <code>col</code> grid elements. Designers often work in<br /> 12-column grids and CSS frameworks tend to follow suit but grids, like all<br /> spacing, should complement copy, not constrain it. Grids should be written ad<br /> hoc, not in a pre-determined format without context. Do not bloat your CSS with<br /> a “grid framework.”</p> <h4><a id="Text_alignment_76"></a>Text alignment</h4> <p><code>text-align</code> is often used to align things other than text. This is not the<br /> right tool for the job. Use flexbox for this kind of alignment. Using the values<br /> <code>left</code>and <code>right</code> doesn’t always work with languages that are right-to-left or<br /> vertical (some browsers map these values to the flow-relative <code>start</code> and <code>end</code>,<br /> but not all). Using the value <code>justify</code> on text can cause problems in some<br /> languages with digraphs, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-align#Accessibility_concerns" target="_blank">it can cause problems for people with<br /> dyslexia</a>.<br /> Every use case for <code>text-align</code> is better solved by flexbox, so use that<br /> instead. Always.</p> <h4><a id="Outlines_88"></a>Outlines</h4> <p>Outlines on focused elements are how browsers natively communicate which element<br /> is receiving input. The default outlines are usually prominent enough to be<br /> useful to every user, including those needing high contrast. The default outline<br /> is usually overwritten (or removed) because it doesn’t fit with the site’s<br /> design. Unless you are *replacing *the focused <code>outline</code> style with some other<br /> prominent and accessible focus indicator, <strong>do not remove or nullify the outline<br /> property</strong>.</p> <h4><a id="Focus__Hover_98"></a>Focus &amp; Hover</h4> <p>As mentioned above, beware changing <code>:focus</code> styling because it acts as an<br /> indicator for which element is currently receiving input. Adding styles to an<br /> element on <code>:hover</code> is often a nice touch, but do not use that pseudo-selector<br /> to show additional copy unless you do the same for <code>:focus</code> (and, of course, if<br /> the element is <em>focusable</em>). It is usually, but not always, a good idea to use<br /> both the <code>:hover</code> and <code>:focus</code> pseudo-selectors for the same ruleset. (Adding<br /> the <code>:focus</code> selector to the hover styles for a button can result in a pressed<br /> button looking “stuck” on.)</p> <h4><a id="Opacity_109"></a>Opacity</h4> <p>Setting the <code>opacity</code> of an element to <code>0</code> does not actually hide it from<br /> accessibility tools. The element still takes up room in the flow of the document<br /> and its copy is still read by screen-readers. The only two use-cases that<br /> reasonably call for the use of the <code>opacity</code> property is when transitioning an<br /> element into view (transition quickly from <code>0</code> to <code>1</code>) and when styling a dialog<br /> overlay (so the content below is somewhat visible). Beware of “stacked”<br /> semi-opaque overlays. The opacity level is multiplicative, so the content below<br /> two overlays each with <code>opacity: 50%</code> is shown as if it is below a single<br /> element with <code>opacity: 25%</code>.</p> <h4><a id="Selectors_121"></a>Selectors</h4> <p>Stick to using class and class-like selectors. Using id, type, and universal<br /> selectors come with headaches. In CSS specificity, id selectors will always win<br /> against any other selector, but <code>id</code><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" target="_blank"> attributes are supposed to be<br /> unique</a><br /> (per page) so they’re not useful for applying reusable styles.</p> <p>Selector performance in modern browsers is a negligible concern, so despite what<br /> you may have heard about the universal selector (<code>*</code>) not being performant, my<br /> real concern with its use is that it is too general for almost every use-case.<br /> Using some selector like <code>.my-class &gt; *</code> will eventually lead to opting out some<br /> child, so you might as well add classes to the elements you wish to style and<br /> target them directly.</p> <p>A similar argument can be made for not using type selectors, like <code>div</code>, <code>main</code>.<br /> They tend to match too many elements and usually require more details to be<br /> useful, such as <code>div.some-class</code>. Compound selectors like this have a higher<br /> specificity than a single class selector, a bug-generating problem addressed<br /> below.</p> <p>Stick to class (<code>.class</code>), attribute (<code>[attribute]</code>), and pseudo-class<br /> (<code>:focus</code>) selectors. They all have the same level of specificity.</p> <h4><a id="Specificity_145"></a>Specificity</h4> <p>At the opposite end of the spectrum of selectors being too general (like using<br /> <code>*</code>) are selectors being too specific. Both cases cause problems. An<br /> overly-specific selector breeds even more specific selectors or the dreaded<br /> <code>!important</code> declarations. Each successive selector becomes a new hurdle to<br /> overcome when making styling changes, and following this path leads to the<br /> ever-growing fragile stylesheets we all dread working with.</p> <p>CSS has a naturally increasing specificity — the order of the rulesets. This is<br /> part of <a href="https://medium.com/@ntgard/cascades-in-css-e79f8c0f4df2" target="_blank">the cascade in Cascading Style<br /> Sheets</a>. With this in<br /> mind, we can write rulesets in ascending order of “importance” without<br /> increasing the selector specificity level. For example:</p> <pre><code>.btn { color: black; } .btn--primary { color: green; } .btn--primary--light { color: white; } </code></pre> <p>In this example, each single-class-selector is more specific than its<br /> predecessor, eliminating the need to declare a ruleset for <code>.btn.btn--primary</code><br /> or <code>.btn.btn--primary--light</code>.</p> <p>The fix is to stick to single class selectors as much as possible, written in<br /> order of increasing “importance,” and avoid using <code>!important</code> declarations.</p> <h4><a id="Texttransform_177"></a>Text-transform</h4> <p>For sites that support languages other than English, using <code>text-transform</code> will<br /> probably cause problems. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Browser_compatibility" target="_blank">There are several cases where browsers replace a<br /> character with an incorrect version for the upper- or lower-case<br /> transformations</a>.<br /> The fix is never to use <code>text-transform</code> and instead rely on an accurately<br /> capitalized copy.</p> <h4><a id="Zindex_186"></a>Z-index</h4> <p>If any <code>z-index</code> rule is included in a stylesheet, there will eventually be two<br /> other rules that declare <code>z-index: 9999;</code> and <code>z-index: 99999;</code>. Attempting to<br /> use atomic classes or variables to limit the number of acceptable z-indexes will<br /> not only fail to curb developers from using <code>calc()</code> and SCSS math to modify the<br /> value for their use-case, but will miss the target entirely because of how<br /> stacking contexts work.</p> <p>It has been my experience that most, if not all, uses of <code>z-index</code> can be<br /> replaced by restructuring the HTML to use the natural stacking context (elements<br /> lower on the page are higher in the context) or by <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context" target="_blank">adding a property to the<br /> element or its parent to force a new stacking<br /> context</a>.</p> <p>Avoid <code>z-index</code> at all costs.</p> <h4><a id="Pseudoelements_203"></a>Pseudo-elements</h4> <p>Using the pseudo-elements <code>::before</code> and <code>::after</code> is not only helpful, but it’s<br /> often fun! Many stylistic tricks rely on the use of these two pseudo elements<br /> and, as long as there is no copy in them (via their <code>content</code> property), they<br /> are considered semantic. The issue with putting copy in these elements is that<br /> whether or not they are read by accessibility devices varies across browsers and<br /> devices. It is better to not deal with that discrepancy by avoiding placing a<br /> copy in them.</p> <p>The pseudo-elements <code>::first-letter</code> and <code>::first-line</code> do not work like you<br /> probably think they should. They only target the first letter/line in a<br /> block-level element. There are also issues with the <code>::first-line</code> selector<br /> incorrectly targeting double-byte characters (such as Japanese Kana) and<br /> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter#Browser_compatibility" target="_blank">digraphs</a>.</p> <p>Manipulating the styles of selected text or placeholder text via <code>::selection</code><br /> and <code>::placeholder</code>, respectively, often leads to trouble. With <code>::placeholder</code>,<br /> the concern is simple: <a href="https://www.nngroup.com/articles/form-design-placeholders/" target="_blank">you shouldn’t be using<br /> placeholders</a>. This<br /> is especially true for anything of importance, such as input labels or hints. By<br /> including <code>::placeholder</code> styles, you encourage developers, designers, and<br /> authors to use them, much to the frustration of your users.</p> <p>Modifying selection styles, usually <code>color</code> and <code>background-color</code>, leads to<br /> more subtle but insidious bugs. While the <a href="https://stackoverflow.com/a/16094931" target="_blank">default selection<br /> colors</a> are not consistent across browsers<br /> or devices and they do not always provide an acceptable contrast with your<br /> site’s text color, users sometimes overwrite them for accessibility reasons.<br /> Changing the colors, in this case, could either not work (because of the user’s<br /> accessibility CSS trumps yours) or it could interfere with their style sheets<br /> (if you use <code>!important</code>). Using this pseudo-element to try to guarantee an<br /> accessible contrast could end up disrupting the experience for the very people<br /> you wish to help.</p> <p>(Though I’ve forgotten many of the details of this bug, I ran into an issue<br /> years ago where Chrome’s auto-translated text was rendered invisible because it<br /> relied on <code>::selection</code> styling which I had modified.)</p> <h4><a id="Transitions__Animations_242"></a>Transitions &amp; Animations</h4> <p>Transitioning or animating properties other than <code>opacity</code> and <code>transform</code><br /> causes the browser to repaint or reflow the page. This may not seem like a<br /> problem on a high-end developer machine, but it will cause stuttering on low-end<br /> laptops and phones. Bad animation is worse than no animation.</p> <h4><a id="Prefers_Reduced_Motion_249"></a>Prefers Reduced Motion</h4> <p>Writing animations that are helpful, beautiful, and <em>safe</em> is not a simple<br /> undertaking. With the advent of the media query <code>prefers-reduced-motion</code>, we can<br /> help make our pages safer for people with vestibular disorders, and less<br /> annoying for the rest of us. While adding this media query is not a silver<br /> bullet, it helps. I’ve written the nested rule to be opt-out, meaning that<br /> <strong>all</strong> CSS animations get stopped unless the author includes the class<br /> <code>safe-animation</code> on the element.</p> <pre><code>/* */ (prefers-reduced-motion: reduce) { *:not(.safe-animation), *:not(.safe-animation)::before, *:not(.safe-animation)::after { animation-duration: 0.01s !important; animation-iteration-count: 1 !important; transition-duration: 0s !important; scroll-behavior: auto !important; } } </code></pre> <h4><a id="Reset_extensions_272"></a>Reset extensions</h4> <p>My go-to CSS reset is a modified form of the <a href="https://meyerweb.com/eric/tools/css/reset/" target="_blank">Meyers<br /> reset</a>. There are a few rules I<br /> remove from the reset, though. I don’t like to remove list icons from <code>ol</code> and<br /> <code>ul</code> elements. I find that doing so encourages developers to use those elements<br /> in non-semantic ways, like grouping items that are physically proximate but not<br /> ontologically proximate. I also remove the rule setting the <code>line-height</code> on the<br /> <code>body</code> to <code>1</code>. Setting attributes that affect, or are affected by, the font<br /> <em>separately</em> from setting the font is a bug waiting to happen.</p> <p>Some additions I make to the reset file are below. I do not like to include a<br /> <code>.hidden</code> atomic class in my CSS because there is a better option that will work<br /> even if the CSS doesn’t load — the <code>hidden</code> attribute. The default browser<br /> behavior of setting <code>display: none</code> on hidden elements can be overwritten, even<br /> accidentally, so I include a rule to enforce it.</p> <pre><code>body { /* more intuitive sizing */ box-sizing: border-box; } *, ::before, ::after { box-sizing: inherit; } i, cite, em, var, dfn, address { /* prevent faux italic */ font-style: normal; } b, h1, h2, h3, h4, h5, h6, strong, th { /* prevent faux bold */ font-weight: normal; } [hidden] { /* enforce accessible semantics */ display: none !important; } </code></pre> <blockquote> <p>My Reset:<br /> <a href="https://github.com/NickGard/css-utils/blob/master/reset.css" target="_blank">https://github.com/NickGard/css-utils/blob/master/reset.css</a></p> </blockquote> <p>Another utility that I often find necessary is a <code>visually-hidden</code> class. While<br /> I use <code>aria-label</code> more often for invisible screen-readable text, I usually<br /> include the following rule somewhere:</p> <pre><code>/* */ .visually-hidden { position: absolute !important; height: 1px; width: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px); } </code></pre> <h4><a id="BEMish_naming_326"></a>BEMish naming</h4> <p>I can’t end this article without at least one comment on naming conventions. I<br /> like the BEM naming because it reads well. <code>&lt;button class=&quot;btn--primary&quot; /&gt;</code><br /> tells me exactly what kind of button it is. My one break from the Official BEM™<br /> methodology is that I like to use <strong>one</strong> class on an element (with the possible<br /> exception of atomic classes). It offends my sensibilities to see <code>&lt;button class=&quot;btn btn--primary&quot; /&gt;</code> because the second class already tells me the<br /> styles extend from the base <code>btn</code> ruleset. This also creates <strong>two reasons for a<br /> line to change</strong>, which is a red flag.</p> <p>In my CSS, this looks like this:</p> <pre><code>.btn, .btn--primary { /* base button styles */ } .btn--primary { /* primary button overrides */ /* has naturally higher specificity */ } </code></pre> <p>In SCSS, you can achieve this same effect using <code>@extend</code>.</p> <h4><a id="Conclusion_349"></a>Conclusion</h4> <p>These have been my rules of thumb for several years now and have helped me<br /> maintain large codebases with many contributors. It’s not perfect and I’m always<br /> adjusting it (<code>prefers-reduced-motion</code> is new) but I hope that by sharing it, it<br /> will help others.</p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/css?source=post" target="_blank">CSS</a></li> <li><a href="https://medium.freecodecamp.org/tagged/programming?source=post" target="_blank">Programming</a></li> <li><a href="https://medium.freecodecamp.org/tagged/web-development?source=post" target="_blank">Web<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/web-design?source=post" target="_blank">Web Design</a></li> <li><a href="https://medium.freecodecamp.org/tagged/tech?source=post" target="_blank">Tech</a></li> </ul> <h3><a id="Nick_Gardhttpsmediumfreecodecamporgntgard_363"></a><a href="https://medium.freecodecamp.org/@ntgard" target="_blank">Nick Gard</a></h3> <p>Web Developer, Oregonian, husband</p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_367"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p> ',
                'user_id' => '7',
                'topic_id' => '3',
            ], [
                'title' => 'How to create a Buttons UI Kit',
                'content' => ' <p>The <strong>theme</strong> for week #6 of the <a href="https://www.florin-pop.com/blog/2019/03/weekly-coding-challenge/" target="_blank">Weekly Coding<br /> Challenge</a> is:</p> <h3><a id="Buttons_4"></a>Buttons</h3> <p>“A button? ” you might ask… Yes! A button! </p> <p>“But why?”</p> <p>Because a button is one of the building blocks of any website/web application.<br /> Whether you are on Facebook or Twitter or Google, etc, you’ll always find a<br /> button that allows you to interact with the application in some way. So this<br /> week we’re going to build buttons — lots of buttons!</p> <p>If you want to participate in the Challenge, feel free to build any kind of<br /> buttons: <strong>3D buttons</strong>, buttons with <strong>ripple effect</strong>, <strong>animating</strong> buttons,<br /> etc — the sky is the limit 🚀. <strong>Be creative</strong>! You know how much I value<br /> creativity! 👍</p> <p><img src="https://cdn-images-1.medium.com/max/600/0*2aQjTjjd0_RMJpFR.gif" alt="" /></p> <p>In this article we are going to build multiple buttons and put all of them in a<br /> <a href="https://codepen.io/FlorinPop17/full/MRbOMJ" target="_blank">Buttons UI Kit</a>:</p> <p>Before we move to the implementation part, let’s see the different states in<br /> which a button can be:</p> <ol> <li><strong>Default</strong> state</li> <li><strong>Hover</strong> state — when the mouse is over the button</li> <li><strong>Active</strong> state — when the button is pressed</li> <li><strong>Focus</strong> state — when the button is highlighted. Allowed on elements that<br /> accept keyboard events. This is used to give users that only use the keyboard<br /> some guidance as they traverse the application.</li> <li><strong>Disabled</strong> state</li> </ol> <p>We need to style the buttons to cover all these states.</p> <p>Also, we’ll have three different button types: <code>primary</code>, <code>secondary</code> and<br /> <code>tertiary</code> and two extra sizes: <code>large</code> and <code>small</code>.</p> <h3><a id="The_HTML_41"></a>The HTML</h3> <p>We are using classes to differentiate between the different types of buttons.</p> <h3><a id="The_CSS_45"></a>The CSS</h3> <p><code>.btn</code> is the main class used by all of our buttons:</p> <p>☝️ Some general styling to make it look better than the default version. 😉</p> <p>Next, we have the different states:</p> <p>In order to have some difference between the states, we can play with the<br /> <code>opacity</code> property.</p> <p>Initially the button has <code>opacity: 1</code> and we reduce that <code>opacity</code> slightly when<br /> we hover over the button and then a little more when the button is <code>disabled</code>.<br /> When we click on the button though, we’ll set the opacity back to 1 as it gives<br /> a nice effect.</p> <p>For the <code>focus</code> state, we remove the default <code>outline</code> property and we’ll add a<br /> <code>box-shadow</code> property instead, but we’ll do this separately for each button type<br /> because the color is changing depending on the class (see below).</p> <p>The individual colors are set to the <code>.btn-primary</code>, <code>.btn-secondary</code> and<br /> <code>.btn-tertiary</code> classes:</p> <p>As you can see we use the <a href="https://www.w3schools.com/css/css3_variables.asp" target="_blank">CSS<br /> variables</a> method to set the<br /> same color on different properties. But for this to work, we need to declare the<br /> color variables on <code>:root</code> as follows:</p> <p>Note that it’s good practice to add the <code>:root</code> declaration in the top of the<br /> css file.</p> <p>Lastly, let’s add the two extra sizes; <code>.btn-large</code> and <code>.btn-small</code> classes:</p> <h3><a id="Conclusion_78"></a>Conclusion</h3> <p>See how easy it is to create a <em>Buttons UI Kit</em>? 😄</p> <p>As a <strong>bonus features</strong> you can add a <code>ripple effect</code> to the buttons via<br /> <strong>JavaScript</strong>. I did this in a previous article - you can check it out by<br /> clicking <a href="https://www.florin-pop.com/blog/2017/09/button-ripple-effect" target="_blank">here</a>!</p> <p>I hope you liked this challenge and I can’t wait to see what you’re going to<br /> create!</p> <p>Happy Coding! </p> <hr /> <p><em>Originally published at<br /> <em><a href="https://www.florin-pop.com/blog/2019/04/buttons-ui-kit/" target="_blank">www.florin-pop.com</a></em>.</em></p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/web-development?source=post" target="_blank">Web<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/programming?source=post" target="_blank">Programming</a></li> <li><a href="https://medium.freecodecamp.org/tagged/ui?source=post" target="_blank">UI</a></li> <li><a href="https://medium.freecodecamp.org/tagged/css?source=post" target="_blank">CSS</a></li> <li><a href="https://medium.freecodecamp.org/tagged/design?source=post" target="_blank">Design</a></li> </ul> <h3><a id="Florin_Pophttpsmediumfreecodecamporgpopflorin1705_103"></a><a href="https://medium.freecodecamp.org/@popflorin1705" target="_blank">Florin Pop</a></h3> <p>JavaScript enthusiast , Front-end developer 💻 &amp; Blogger at<br /> <a href="https://florin-pop.com/blog/" target="_blank">https://florin-pop.com/blog/</a></p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_108"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p> <p>Thank you for this article. I just have one question, is there any reason you<br /> chose px measurments (vs em, rem, …)?</p> <p>No reason. I’m just used with px, that’s all </p> ',
                'user_id' => '8',
                'topic_id' => '3',
            ], [
                'title' => 'Follow these steps to become a CSS Superstar',
                'content' => '  <p> CSS (Cascading Style Sheets) is one of the core technologies used for building<br /> webpages. Since it is the ONLY style sheet language that browsers can<br /> understand, it’s important to learn CSS in depth to master web development.</p> <p>It’s very easy to get started with CSS. With just a few hours of training, you<br /> can easily style texts, elements and layouts. However, it becomes progressively<br /> difficult and soon you’ll come to a situation where your code starts getting<br /> quite messy. The components which used to work before start breaking, and you<br /> google and find the fix which fixes your element but breaks 5 other elements, as<br /> the solution you found on google changed the <code>display</code>or <code>position</code> 😖</p> <h3><a id="Why_learning_CSS_the_right_way_is_important_12"></a><strong>Why learning CSS the right way is important</strong></h3> <p>If you don’t have a deeper understanding of the basics, CSS becomes more like a<br /> **trial and error method. **You’ll try different values for different properties<br /> and finally keep the one which sort of works close to what you wanted without<br /> actually understanding how it works.</p> <p>You’ll start googling basic things like <strong>“how to centre two divs”</strong> or <strong>“how<br /> to align a div and a text vertically”</strong> and copy paste the code from<br /> StackOverflow or codePen every time. Back in those days, when **flexbox **was<br /> not so popular, **“how do you align a div both vertically and horizontally in a<br /> page?” **was a classic CSS interview question. Many beginners could get the<br /> horizontal part right but only a few got the vertical part right too.</p> <h3><a id="The_Roadmap__26"></a>The Roadmap 🏃🏁</h3> <h4><a id="1_The_Basics__28"></a><strong>1. The Basics 📚</strong></h4> <p>If you are just starting web development, learn some basics of<br /> <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML" target="_blank">HTML</a><br /> before starting CSS. In CSS, first read the theory on what CSS is, how it works<br /> in the browser, and its basic syntax and usage.</p> <p>Learn about the different kinds of stylesheets available, their differences,<br /> selectors, and basic styling such as <code>font-size</code>, <code>width</code>, <code>height</code> etc.</p> <p>You can get started by going through the tutorials at<br /> <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS" target="_blank">MDN</a>.</p> <h4><a id="2_CSS_Box_Model__41"></a><strong>2. CSS Box Model 🔳</strong></h4> <p><img src="https://cdn-images-1.medium.com/max/600/1*HnuCN_p4MiCMtOp7ziLpnA.png" alt="" /><br /> <span class="figcaption_hack">credit: <a href="https://developer.mozilla.org/" target="_blank">https://developer.mozilla.org</a></span></p> <p>Understand the basics of <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Box_model" target="_blank">CSS box<br /> mode</a>l<br /> and the properties associated with it such as <code>margin</code>, <code>border</code>, <code>padding</code>etc</p> <h4><a id="3_Images_and_Background__50"></a><strong>3. Images and Background 🌄</strong></h4> <p>Images make the webpage come alive. There are many ways to add an image such as<br /> image tags, adding background colours/gradients and background images to various<br /> other tags. You could also apply what you have learnt previously such as setting<br /> borders to images or use multiple images and develop a simple gallery.</p> <pre><code>&lt;img src=&quot;../images/wallpaper.jpg&quot; &gt; &lt;div class=&quot;image&quot; &gt; &lt;/div&gt; .image { background-image: url(../images/wallpaper.jpg); } </code></pre> <h4><a id="4_Display_and_Position__64"></a><strong>4. Display and Position 📐</strong></h4> <p>These two are some of the most import properties in CSS where you need to pay<br /> attention to understand them correctly. Knowing these two properties well can<br /> make your CSS journey a lot smoother.</p> <pre><code> display: block | inline | inline-block | table | etc </code></pre> <p>Understand how each of these <code>display</code>properties are used. You’ll start to<br /> notice some HTML elements such as <code>&lt;div&gt;</code> <code>&lt;p&gt;</code> or <code>&lt;h1&gt;</code> behave like <code>display: block</code> and some elements like <code>&lt;img&gt;</code> <code>&lt;span&gt;</code> behave like <code>display: inline</code>.</p> <pre><code>position: static | absolute | relative | fixed | sticky </code></pre> <p>This is one of the properties where even experienced programmers make mistakes.<br /> Learn how each of them works, how the position of one element affects its<br /> siblings or parent, in what situations you use them, etc.</p> <p><strong>This step is so important that you can repeat it again and again till you<br /> understand!</strong></p> <pre><code>float: left | right </code></pre> <p>Though float layouts are a bit old school now, there are many old websites which<br /> still uses float layouts.</p> <h4><a id="5_Colours_Fonts_lists_and_Tables__90"></a><strong>5. Colours, Fonts, lists and Tables ☑️</strong></h4> <p>Understand different colour formats such as <code>HEX</code> code, <code>rgb</code>, <code>rgba</code>, <code>hsl</code>,<br /> <code>hsla</code>, <code>transparent</code> etc</p> <pre><code>color: white; color: #fff; color: rgb(255, 255, 255); color: rgba(255, 255, 255, 1); color: hsl(0, 100%, 100%); color: hsla(0, 100%, 100%, 1); color: transparent; </code></pre> <p>Learn how to use different fonts. Some fonts are not available on all browsers,<br /> so you’ll need to learn to add fonts manually with <code>woff</code> or <code>ttf</code> files or<br /> importing google fonts.</p> <p>CSS can turn a basic <em>unordered list</em> <code>&lt;ul&gt;</code> into a beautiful navigation bar!<br /> Years ago tables were used to create screen layouts, thank goodness we don’t do<br /> that anymore! 😅</p> <h4><a id="6_Pseudoclasses_and_Combinators__111"></a><strong>6. Pseudo-classes and Combinators ➕</strong></h4> <p>A CSS <strong>pseudo-class</strong> is a keyword added to a selector that specifies a special<br /> state of the selected element(s). A pseudo-class can be as simple as <code>:hover</code>or<br /> <code>:visited</code> or something complex like :<code>nth-last-of-type(odd)</code></p> <p>**Combinators **help us apply styles to child elements or siblings easily<br /> without having to create new classes for each of them.</p> <pre><code>/* all the paragraph elements inside the container will have color red */ .container &gt; p { color: yellow; } </code></pre> <h4><a id="7_Debugging_and_Dev_tools__126"></a><strong>7. Debugging and Dev tools 🔨</strong></h4> <p>CSS doesn’t throw any errors. It silently breaks the UI if you don’t get the<br /> styles correct 😰 so learning how to use Dev tools is very important.</p> <p>Chrome Dev tools is an amazing tool for web developers. It’s packed with a lot<br /> of great features for debugging your website in real-time and also has<br /> performance checking tools like <a href="https://developers.google.com/web/tools/lighthouse/" target="_blank">lighthouse<br /> </a>built into it.</p> <h4><a id="8_Practice_Practice_Practice__136"></a><strong>8. Practice Practice Practice 💻</strong></h4> <p><img src="https://cdn-images-1.medium.com/max/600/0*RapmXy8eJSyb2OX6" alt="" /><br /> <span class="figcaption_hack">Photo by <a href="https://unsplash.com/@rangel?utm_source=medium&amp;utm_medium=referral" target="_blank">David<br /> Rangel</a> on<br /> <a href="https://unsplash.com/?utm_source=medium&amp;utm_medium=referral" target="_blank">Unsplash</a></span></p> <p>The contents you learnt above are enough to develop a basic website, so at this<br /> point you should start practising by developing small websites. You’ll come<br /> across various challenges when you build a real application. For your practice,<br /> you can develop a simple website for a resort, or build an image gallery, or a<br /> blog, or you can also build a few basic features of your favourite social media<br /> such as Facebook or Instagram.</p> <h4><a id="9_Responsive_Web_Design__150"></a><strong>9. Responsive Web Design 📲🎨</strong></h4> <p><img src="https://cdn-images-1.medium.com/max/600/1*ScNanqYCmVsKnRaPWosYIw.png" alt="" /><br /> <span class="figcaption_hack">credit: Wikipedia</span></p> <p>After learning web development for desktop there are a lot of other devices<br /> through which the websites are accessed. Supporting these devices is equally<br /> important. Before the Responsive design got popular, developers used to design a<br /> separate website for mobiles, a separate website for touch-enabled devices etc.<br /> remember <em>m.facebook.com</em> and <em>touch.facebook.com</em>?</p> <p>There are 3 important things in Responsive web design:</p> <p><strong>Fluid Layouts:</strong></p> <p>Width set with <code>px</code>does not scale based on the browser window. To make the<br /> elements scale based on the browser size, we need to create fluid layouts by<br /> setting the sizes in <code>%</code>or <code>rem</code>units.</p> <p><strong>Media Queries:</strong></p> <p>A media query is a technique to include a block of CSS properties only if a<br /> certain condition is true. We set breakpoints based on our design and change the<br /> CSS depending on the browser width.</p> <pre><code>@media only screen and (max-width: 600px) { body { background-color: lightblue; } } </code></pre> <p><strong>Responsive images:</strong></p> <p>Images scale down as the width of the browser window decreases or if the website<br /> is viewed in mobile devices. Sometimes it would be difficult to focus on the<br /> important details on a particular image so we’d need to use different images for<br /> different screens.</p> <h4><a id="10_Flexbox_and_Grid____188"></a><strong>10. Flexbox and Grid ◼️ ⬛ 🔲</strong></h4> <p>It’s been around 10 years(!) since Flexbox was first introduced, but it was<br /> incorporated only recently in 2015. —<a href="http://annairish.github.io/historicizing/history" target="_blank"><br /> source</a></p> <p>Flexbox and Grid are the styles used to create flexible layouts, and they make<br /> our lives so much easier! This is one of the best things that has ever happened<br /> to CSS. 😃</p> <p>The layout shown below would have taken more than 300 lines of CSS code without<br /> Flexbox or Grid.</p> <h4><a id="11_Transforms_transitions_and_animations__201"></a><strong>11. Transforms, transitions and animations 🔶</strong></h4> <p>Learning basic transforms and transitions will come in handy if you want to<br /> create an interactive web page with moving parts on mouse events or keyboard<br /> events such as hover or click.</p> <p>Before CSS3, animations were done mostly using jQuery — A JavaScript library.<br /> Now CSS has become so powerful that we can do complex animations without any<br /> JavaScript.</p> <p><span class="figcaption_hack">Credit: Aakash Rodrigues</span></p> <h4><a id="12_Preprocessors__213"></a><strong>12. Preprocessors ✴️</strong></h4> <p><strong>CSS preprocessors</strong> are scripting languages that extend the default<br /> capabilities of CSS. They enable us to use logic in our CSS code, such as<br /> variables, nesting, inheritance, mixins, functions, and mathematical operations.<br /> Some of the popular ones are <a href="http://sass-lang.com/" target="_blank">SASS</a>,<br /> <a href="http://lesscss.org/" target="_blank">LESS</a>, <a href="http://stylus-lang.com/" target="_blank">STYLUS </a>and<br /> <a href="http://postcss.org/" target="_blank">POSTCSS</a>.</p> <p>The** SCSS **format of SASS is more widely used, so it’s good to get started<br /> with SASS for development.</p> <p>The <code>autoprefixer</code> plugin of POSTCSS makes your CSS rules compatible across<br /> various browsers by adding extra rules such as <code>-moz-</code> and<code>-webkit-</code>.</p> <h4><a id="13_Frameworks__228"></a>**13. Frameworks **🔧</h4> <p>Learning frameworks such as <a href="http://getbootstrap.com/" target="_blank">Bootstrap</a>,<br /> <a href="http://semantic-ui.com/" target="_blank">Semantic-UI</a> or<br /> <a href="http://materializecss.com/" target="_blank">Materialize</a> is optional but very useful for faster<br /> development as they provide a lot of styles and layouts out of the box.</p> <p>These Frameworks are tested across various browsers, so using these will avoid<br /> some of the compatibility issues. Most of the frameworks follow the responsive<br /> design pattern and lots of free 3rd party templates are be available to get<br /> started quickly.</p> <h4><a id="14_Specificity__240"></a>**14. Specificity **🎨</h4> <p>“<em>tries to modify a button style of bootstrap but fails, googles for a solution,<br /> uses <em><code>!important</code></em> , gets all excited thinking that’s the right fix for all the<br /> problems!</em>” And that’s how you doomed your project! 💀 If you understand the<br /> concept of<br /> <a href="https://developer.mozilla.org/en/docs/Web/CSS/Specificity" target="_blank">Specificity</a>**<br /> **correctly, problems regarding overlapping rules in multiple stylesheets will<br /> be reduced significantly.</p> <p>Specificity is a weight that is applied to a given CSS declaration, determined<br /> by the number of each selector type in the matching selector. Each selector has<br /> a different weight, and using multiple selectors can change the specificity. If<br /> the overall specificities are equal then the order is considered. See the<br /> example below:</p> <pre><code>&lt;style&gt; div.wrapper p.paragraph { color: pink; } #container p{ color: violet; } p { color: green; } .paragraph { color: yellow; } &lt;/style&gt; &lt;div class=&quot;wrapper&quot; id=&quot;container&quot;&gt; &lt;p class=&quot;paragraph&quot;&gt; This is a dummy text &lt;/p&gt; &lt;/div&gt; </code></pre> <p>What do you think would be the colour of the paragraph? 😲</p> <h4><a id="15_CSS_Architecture__281"></a><strong>15. CSS Architecture 🏢</strong></h4> <p>Writing CSS code is easy, but writing maintainable CSS code is hard. A proper<br /> structure and method have to be followed to write good CSS code. Just following<br /> the best practices is not sufficient to write maintainable CSS.</p> <p>Some of the Architecture patterns for CSS are<br /> <a href="http://getbem.com/introduction/" target="_blank">BEM</a>, <a href="http://oocss.org/" target="_blank">OOCSS</a>, <a href="https://smacss.com/" target="_blank">SMACSS<br /> </a>etc. You can go through the documentation and choose<br /> whichever pattern fits your tastes and project.</p> <h3><a id="There_you_have_it__292"></a>There you have it! 🎉</h3> <p>Mastering CSS takes patience and lots of practice. As you start practising<br /> you’ll experience the awesomeness of CSS. 15 big steps might seem daunting at<br /> first but they’re actually not. I loved each and every step, and my experience<br /> got better every time. 😃</p> <p>Thanks for reading my article. I hope that you have found this useful. If so, be<br /> sure to leave lots of claps! 👏 (You can leave up to 50 😉)</p> <h4><a id="Want_to_hire_me_for_your_next_project_Drop_me_an_email_at_contactpreetishin_302"></a>Want to hire me for your next project? Drop me an email at contact@preetish.in</h4> <p>😃</p> <ul> <li><a href="https://medium.freecodecamp.org/tagged/css?source=post" target="_blank">CSS</a></li> <li><a href="https://medium.freecodecamp.org/tagged/programming?source=post" target="_blank">Programming</a></li> <li><a href="https://medium.freecodecamp.org/tagged/web-development?source=post" target="_blank">Web<br /> Development</a></li> <li><a href="https://medium.freecodecamp.org/tagged/technology?source=post" target="_blank">Technology</a></li> <li><a href="https://medium.freecodecamp.org/tagged/front-end-development?source=post" target="_blank">Front End<br /> Development</a></li> </ul> <h3><a id="Preetish_HShttpsmediumfreecodecamporgpreetishhs24_313"></a><a href="https://medium.freecodecamp.org/@preetishhs24" target="_blank">Preetish HS</a></h3> <p>Freelance Web Developer, digital nomad and a design enthusiast.<br /> LinkedIn.com/in/preetishhs</p> <h3><a id="freeCodeCamporghttpsmediumfreecodecamporgsourcefooter_card_318"></a><a href="https://medium.freecodecamp.org/?source=footer_card" target="_blank">freeCodeCamp.org</a></h3> <p>Stories worth reading about programming and technology from our open source<br /> community.</p> <p>Excellent article mate! I found it super useful as I am somehow new into<br /> development and sometimes I struggle with CSS to the point that I hate it.</p> <p>I’m going to start following these 15 steps, hopefully I’ll get more confident<br /> at CSS.</p> <p>Thanks for sharing it!</p> <p>Thanks for reading. I am glad that this article was helpful for you. 😄</p> <p>Sometimes CSS can be frustrating for new developers, with proper understanding<br /> and practice anyone can master CSS easily. It might take some time, don’t worry<br /> you’ll get there soon. Learn a few concepts, practice it by building some small<br /> application…</p> <p>Great article, thanks for taking the time to write this!</p> <p>Thanks for reading the article Chris 😃</p> <p>Very well composed article preetish, kudos!</p> <p>Thanks, Jignesh 😃</p> <p>Thank U 👍👍</p> <p>Understood where to start and where to end.</p> <p>You’re welcome! Thanks for reading.</p> <p>Well, technically not the end because new features are added to CSS very<br /> frequently 😉</p> <p>I am a beginner, had to take some notes. Useful article, thank you! Btw, what is<br /> the color (guess it is violet, but not sure), thanks again!</p> <p>Hey Anna! I am glad that you found this article helpful.</p> <p>Yes, Violet is correct! ( The #id selector has more weight compared to class and<br /> element selectors)</p> <p>i am new here, i found this article very useful thanks</p> <p>Thanks Adekay. I am glad that you found this article helpful!</p> ',
                'user_id' => '8',
                'topic_id' => '3',
            ],
        ];


        foreach ($posts as $index => $post) :

            $index = $index + 1;

            DB::table('posts')->insert([
                'id' => $index,
                'title' => $post['title'],
                'image' => "seeds/posts/" . $index . ".jpeg",
                'content' => $post['content'],
                'user_id' => $post['user_id'],
                'topic_id' => $post['topic_id'],
                'created_at' => $faker->dateTimeBetween($startDate = '-5 years', $endDate = 'now')->format('Y-m-d H:i:s')
            ]);

        endforeach;


    }
}
