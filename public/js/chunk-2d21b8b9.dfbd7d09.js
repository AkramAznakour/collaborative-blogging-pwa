(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21b8b9"],{bfdc:function(e,n,t){"use strict";t.r(n);var r=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("div",{staticClass:"container"},[t("div",{staticClass:"jumbotron jumbotron-fluid mb-3 pl-0 pt-0 pb-0 bg-white position-relative"},[t("div",{staticClass:"h-100 tofront"},[t("div",{staticClass:"row justify-content-between"},[t("div",{staticClass:"col-md-12 pt-6 pb-6 pr-6 align-self-center"},[e._m(0),t("h1",{staticClass:"display-4 secondfont mb-3 font-weight-bold"},[e._v(e._s(e.title))]),t("p",{staticClass:"mb-3"},[e._v("Analysts told CNBC that the currency could hit anywhere between $1.35-$1.40 if the deal gets passed through the U.K. parliament.")])])])])])]),t("div",{staticClass:"container pt-4 pb-4"},[t("div",{staticClass:"row justify-content-center"},[t("div",{staticClass:"col-lg-2 pr-4 mb-4 col-md-12"},[t("div",{staticClass:"sticky-top text-center d-block"},[t("div",{staticClass:"d-flex align-items-center"},[t("img",{staticClass:"rounded-circle",attrs:{src:"http://localhost:8000/img/avatar2.jpg",width:"70"}}),t("div",[t("small",{staticClass:"ml-2"},[e._v("\n                  "+e._s(e.author)+"\n                  "),t("span",{staticClass:"text-muted d-block"},[e._v("A few hours ago Â· 5 min. read")])])])])])]),t("div",{staticClass:"col-md-12 col-lg-8"},[t("article",{staticClass:"article-post"},[t("div",{directives:[{name:"highlight",rawName:"v-highlight"}],domProps:{innerHTML:e._s(e.content)}})])])])])])},i=[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",{staticClass:"text-uppercase font-weight-bold"},[t("a",{staticClass:"text-danger",attrs:{href:"./category.html"}},[e._v("Stories")])])}],a={name:"ShowPost",data:function(){return{id:this.$route.params.id,title:"Vue Offline",author:"Akram Aznakour",content:"# Vue Offline\r\n\r\nThis library allows you to enhance offline capabilities of your Vue.js application. It's especially useful when you're building offline-first Progressive Web Apps or just want to inform your users that they lost internet connection. \r\n\r\n**TL;DR** Adds `isOnline` `isOffline` data properties, `online`, `offline` events via global mixin and enables offline storage via `Vue.$offlineStorage` based on Local Storage\r\n\r\n- [Installation](#installation)\r\n- [Capabilities](#capabilities)\r\n    - [VueOfflineMixin](#vueofflinemixin)\r\n    - [VueOfflineStorage](#vueofflinestorage)\r\n\r\nInitially made for [Vue Storefront](https://github.com/DivanteLtd/vue-storefront)\r\n\r\n## Installation\r\nTo install this package as a plugin just type:\r\n````\r\nnpm install vue-offline --save\r\n````\r\n\r\nand add it into your application with\r\n````js\r\nimport VueOffline from 'vue-offline'\r\n\r\nVue.use(VueOffline)\r\n````\r\n\r\n## Capabilities\r\nThis plugin contains two features:\r\n\r\n### VueOfflineMixin\r\nGlobal mixin that'll add following properties to every component in your application:\r\n\r\n- `isOnline` & `isOffline` data properties\r\n````html\r\n<template>\r\n    <p v-if=\"isOnline\">This part will be visible only if user is online</p>\r\n    <p v-if=\"isOffline\">This part will be visible only if user is offline</p>\r\n</template>\r\n````\r\n````js\r\nexport default {\r\n    name: 'MyComponent',\r\n    computed: {\r\n        networkStatus () {\r\n            return this.isOnline ? 'My network is fine' : 'I am offline'\r\n        }\r\n    }\r\n}\r\n````\r\n- `online` and `offline` events in every component\r\n````js\r\nexport default {\r\n    name: 'MyComponent',\r\n    mounted () {\r\n        this.$on('offline' () => {\r\n            alert('You are offline! The website will not work')\r\n        })\r\n    }\r\n}\r\n````\r\n\r\n### Additional configuration\r\n\r\nBy default `VueOfflineMixin` is injected into every component which may be a cause of potential performance problems. You can disable this behavior by setting plugin option `mixin` to `false`. \r\n````js\r\nVue.use(VueOffline, {\r\n    mixin: false\r\n})\r\n````\r\n\r\nYou can still make use of `VueOfflineMixin` by injecting it directly into your components:\r\n````js \r\nimport { VueOfflineMixin } from 'vue-offline'\r\n\r\nexport default {\r\n    name: 'MyComponent',\r\n    mixins: [VueofflineMixin],\r\n    computed: {\r\n        networkStatus () {\r\n            return this.isOnline ? 'My network is fine' : 'I am offline'\r\n        }\r\n    },\r\n    mounted () {\r\n        this.$on('offline' () => {\r\n            alert('You are offline! The website will not work')\r\n        })\r\n    }\r\n}\r\n````\r\n### VueOfflineStorage \r\n Offline storage that uses [local storage](https://developer.mozilla.org/pl/docs/Web/API/Window/localStorage) to persist data for offline usage and caching. It's a perfect choice for offline-first PWA. You can use it as a fallback for failed network requests or a local cache. \r\n\r\nThe storage object has following properties: \r\n- `set(key, value)` - puts (or updates if already exists) `value` into storage under key `key`.\r\n- `get(key)` - returns value stored under key `key`\r\n- `keys` - return array of keys existing in your offline storage\r\n\r\nTo use this storage inside your app you can either\r\n-  use `this.$offlineStorage` from Vue instance property in your components:\r\n````js\r\nexport default {\r\n    methods: {\r\n        getUserData () {\r\n            if (this.isOnline) {\r\n                // make network request that returns 'userData' object\r\n                this.appData = userData\r\n                this.$offlineStorage.set('user', userData)\r\n            } else {\r\n                this.appData = this.$offlineStorage.get('user')\r\n            }\r\n        }\r\n    }\r\n}\r\n````\r\n- import the `VueOfflineStorage` instance if you want to use it somewhere else (e.g. Vuex store)\r\n````js\r\nimport { VueOfflineStorage } from 'vue-offline'\r\n\r\nconst cachedData = VueOfflineStorage.get('cached-data')\r\n\r\n````\r\n### Additional configuration\r\n\r\nBy default `VueofflineStorage` reference is included into every Vue component. You can disable this behavior by setting plugin option `storage` to `false`. \r\n````js\r\nVue.use(VueOffline, {\r\n    storage: false\r\n})\r\n````\r\n\r\nYou can still make use of `VueOfflineStorage` by importing it directly into your components:\r\n````js \r\nimport { VueOfflineStorage } from 'vue-offline'\r\n\r\nexport default {\r\n    name: 'MyComponent',\r\n    methods: {\r\n        getUserData () {\r\n            if (this.isOnline) {\r\n                // make network request that returns 'userData' object\r\n                this.appData = userData\r\n                VueOfflineStorage.set('user', userData)\r\n            } else {\r\n                this.appData = VueOfflineStorage.get('user')\r\n            }\r\n        }\r\n    }\r\n}\r\n````\r\n",imageSrc:"http://localhost:8000/img/intro.jpg"}}},o=a,s=t("2877"),l=Object(s["a"])(o,r,i,!1,null,null,null);n["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d21b8b9.dfbd7d09.js.map